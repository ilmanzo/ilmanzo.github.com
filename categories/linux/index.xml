<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Linux on ilManzo's blog</title><link>https://ilmanzo.github.io/categories/linux/</link><description>Recent content in Linux on ilManzo's blog</description><generator>Hugo -- 0.136.2</generator><language>en-us</language><copyright>2012-2024 Andrea Manzini</copyright><lastBuildDate>Tue, 01 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>The Linux kernel ftrace</title><link>https://ilmanzo.github.io/post/kernel_ftrace/</link><pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/kernel_ftrace/</guid><description>Overview of the Linux kernel tracing feature</description></item><item><title>Playing with Linux kernel capabilities</title><link>https://ilmanzo.github.io/post/playing_with_linux_capabilities/</link><pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/playing_with_linux_capabilities/</guid><description>What are and how to use the Linux kernel capabilities</description></item><item><title>Measure your program's power consumption</title><link>https://ilmanzo.github.io/post/measure_your_power_consumption/</link><pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/measure_your_power_consumption/</guid><description>Understand how much power you are using</description></item><item><title>Headless Testing of PySide/PyQt GUI Applications with pytest-qt</title><link>https://ilmanzo.github.io/post/testing_pyside_gui_applications/</link><pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/testing_pyside_gui_applications/</guid><description>An approach to headless testing of GUI programs</description></item><item><title>A different approach to terminal user interfaces</title><link>https://ilmanzo.github.io/post/first_steps_with_golang_tui/</link><pubDate>Fri, 03 May 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/first_steps_with_golang_tui/</guid><description>First steps with Bubble Tea, a Go TUI framework</description></item><item><title>SEGFAULT: Debugging a crashing application</title><link>https://ilmanzo.github.io/post/debugging_segfault/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/debugging_segfault/</guid><description>What&amp;#39;s a core dump and how to use it for debugging ?</description></item><item><title>First steps with Linux Test Project</title><link>https://ilmanzo.github.io/post/first_steps_of_ltp_linux_test_project/</link><pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/first_steps_of_ltp_linux_test_project/</guid><description>How the Linux Kernel is tested, one syscall at a time</description></item><item><title>Introduction to packaging Rust application</title><link>https://ilmanzo.github.io/post/introduction_to_packaging_rust_applications/</link><pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/introduction_to_packaging_rust_applications/</guid><description>How to package a Rust application on openSUSE</description></item><item><title>Fault Injection in Network Namespace and Veth Environments</title><link>https://ilmanzo.github.io/post/faulty_network_simulation/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/faulty_network_simulation/</guid><description>How to improve your software by simulating a faulty network device</description></item><item><title>Expect the unexpected</title><link>https://ilmanzo.github.io/post/faulty_disk_simulation/</link><pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/faulty_disk_simulation/</guid><description>How to improve your software by simulating a faulty block device</description></item><item><title>A trip on the rusty D-Bus</title><link>https://ilmanzo.github.io/post/a_trip_on_the_rusty_dbus/</link><pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a_trip_on_the_rusty_dbus/</guid><description>How to expose a D-Bus service and create a simple client writing some Rust code</description></item><item><title>Debugging a problematic build</title><link>https://ilmanzo.github.io/post/inspect-obs-vm-during-build/</link><pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/inspect-obs-vm-during-build/</guid><description>A technique to inspect Open Build Service build process</description></item><item><title>linux resource control with cgroups</title><link>https://ilmanzo.github.io/post/linux-resource-control-with-cgroups/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/linux-resource-control-with-cgroups/</guid><description>using systemd slices to manage resources</description></item><item><title>Hijack C library functions in D</title><link>https://ilmanzo.github.io/post/hijack-c-library-function-in-d/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/hijack-c-library-function-in-d/</guid><description>&lt;p>I like playing with the &lt;a href="https://dlang.org/">D programming language&lt;/a> and I wrote this little post to show how it&amp;rsquo;s easy to create a dynamic library (shared object, &lt;code>.so&lt;/code>) that can be invoked in other programs; to have a little fun we will write a D replacement for the &lt;code>rand()&lt;/code> C standard library function call. For your convenience, all the code is also &lt;a href="https://github.com/ilmanzo/hijack_C_stdlib_func_with_D">on github&lt;/a>&lt;/p>
&lt;p>Let&amp;rsquo;s start with the demo implementation, a C program that calls 10 times the stdlib function &lt;code>rand()&lt;/code> to get a random number.&lt;/p></description></item><item><title>a very simple NTP client in D</title><link>https://ilmanzo.github.io/post/a-simple-ntp-client-in-d/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-ntp-client-in-d/</guid><description>&lt;p>I am quite a fan of the &lt;a href="https://dlang.org/">D programming language&lt;/a> and I think it deserves more attention, even if since a few months it&amp;rsquo;s becoming more and more popular, as it gained top20 in the &lt;a href="https://www.tiobe.com/tiobe-index/">TIOBE Index&lt;/a> for February 2020.&lt;/p>
&lt;p>As an experiment in network programming, I took &lt;a href="https://github.com/SanketDG/c-projects/blob/master/ntp-client.c">this simple NTP client&lt;/a> written in C and translated to D ; in my opinion while it&amp;rsquo;s keeping the low-level nature, it&amp;rsquo;s shorter, clearer and more effective. It&amp;rsquo;s only a dozen lines of code, but full program is available &lt;a href="https://github.com/ilmanzo/ntpclient">on my github&lt;/a>; stars and contributions are welcome!&lt;/p></description></item><item><title>linux: how to access DHCP options from client</title><link>https://ilmanzo.github.io/post/access-dhcp-options-from-client/</link><pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/access-dhcp-options-from-client/</guid><description>how to access DHCP options from client</description></item><item><title>simple and easy linux job queue</title><link>https://ilmanzo.github.io/post/simple-easy-job-queue-linux/</link><pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/simple-easy-job-queue-linux/</guid><description>exploiting linux printing queue facility to manage heterogeneous jobs</description></item><item><title>redirect output of an already running process</title><link>https://ilmanzo.github.io/post/redirect-output-of-running-process/</link><pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/redirect-output-of-running-process/</guid><description>how to store standard output/error of a process after the execution</description></item><item><title>Linux Day 2012</title><link>https://ilmanzo.github.io/post/linux-day-2012/</link><pubDate>Sat, 03 Nov 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/linux-day-2012/</guid><description>&lt;p>Anche quest&amp;rsquo;anno ho avuto il piacere di partecipare al Linux Day,
organizzato per Verona presso la sede del &lt;a href="http://www.lugverona.it/linux-day-2012/">LUG Verona&lt;/a> in via dei Gelsi a Montorio;
Ho tenuto una breve presentazione su un argomento che mi sta a cuore:
partecipare attivamente alla comunita&amp;rsquo; del software libero,
perche&amp;rsquo; anche se ormai Linux e Il free software hanno una discreta diffusione, la
maggior parte degli utenti si limita all&amp;rsquo;utilizzo passivo e anzi spesso si lamenta per
la scarsa qualita&amp;rsquo; del software open. Il software libero &lt;strong>NON&lt;/strong> e&amp;rsquo; solo avere programmi gratis!
Vorrei invitare chiunque a &amp;ldquo;passare dall&amp;rsquo;altra parte&amp;rdquo; e abbandonare il comodo stato di
&amp;ldquo;spettatori&amp;rdquo; per cominciare a dare il proprio contributo, ognuno per quello che puo'.&lt;/p></description></item></channel></rss>