<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on ilManzo's blog</title><link>https://ilmanzo.github.io/post/</link><description>Recent content in Posts on ilManzo's blog</description><generator>Hugo -- 0.138.0</generator><language>en-us</language><copyright>2012-2024 Andrea Manzini</copyright><lastBuildDate>Thu, 14 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Wrapping up GoLab 2024</title><link>https://ilmanzo.github.io/post/golab2024/</link><pubDate>Thu, 14 Nov 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/golab2024/</guid><description>Personal highlights from GoLab 2024 conference</description></item><item><title>Linux Test Project part 2</title><link>https://ilmanzo.github.io/post/followup_linux_test_project_options/</link><pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/followup_linux_test_project_options/</guid><description>Follow-up on LTP: the test options</description></item><item><title>Wrapping up ContainerDay 2024</title><link>https://ilmanzo.github.io/post/containerday2024/</link><pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/containerday2024/</guid><description>Highlights from Italian ContainerDay 2024 conference</description></item><item><title>The Linux kernel ftrace</title><link>https://ilmanzo.github.io/post/kernel_ftrace/</link><pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/kernel_ftrace/</guid><description>Overview of the Linux kernel tracing feature</description></item><item><title>Testing a cheap MicroSD card quality</title><link>https://ilmanzo.github.io/post/testing_a_microsd_card/</link><pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/testing_a_microsd_card/</guid><description>Some basic checks to ensure you bought a good storage for your files</description></item><item><title>Playing with Linux kernel capabilities</title><link>https://ilmanzo.github.io/post/playing_with_linux_capabilities/</link><pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/playing_with_linux_capabilities/</guid><description>What are and how to use the Linux kernel capabilities</description></item><item><title>Measure your program's power consumption</title><link>https://ilmanzo.github.io/post/measure_your_power_consumption/</link><pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/measure_your_power_consumption/</guid><description>Understand how much power you are using</description></item><item><title>Headless Testing of PySide/PyQt GUI Applications with pytest-qt</title><link>https://ilmanzo.github.io/post/testing_pyside_gui_applications/</link><pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/testing_pyside_gui_applications/</guid><description>An approach to headless testing of GUI programs</description></item><item><title>A different approach to terminal user interfaces</title><link>https://ilmanzo.github.io/post/first_steps_with_golang_tui/</link><pubDate>Fri, 03 May 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/first_steps_with_golang_tui/</guid><description>First steps with Bubble Tea, a Go TUI framework</description></item><item><title>SEGFAULT: Debugging a crashing application</title><link>https://ilmanzo.github.io/post/debugging_segfault/</link><pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/debugging_segfault/</guid><description>What&amp;#39;s a core dump and how to use it for debugging ?</description></item><item><title>Osday 2024 recap</title><link>https://ilmanzo.github.io/post/wrapping_up_osday_2024/</link><pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/wrapping_up_osday_2024/</guid><description>Quick debriefing after a cool event in Florence</description></item><item><title>Playing with Rust on ARM architecture</title><link>https://ilmanzo.github.io/post/experiments_with_rust_on_arm_architecture/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/experiments_with_rust_on_arm_architecture/</guid><description>Easy cross compilation for everyone</description></item><item><title>First steps with Linux Test Project</title><link>https://ilmanzo.github.io/post/first_steps_of_ltp_linux_test_project/</link><pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/first_steps_of_ltp_linux_test_project/</guid><description>How the Linux Kernel is tested, one syscall at a time</description></item><item><title>Introduction to packaging Rust application</title><link>https://ilmanzo.github.io/post/introduction_to_packaging_rust_applications/</link><pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/introduction_to_packaging_rust_applications/</guid><description>How to package a Rust application on openSUSE</description></item><item><title>Fault Injection in Network Namespace and Veth Environments</title><link>https://ilmanzo.github.io/post/faulty_network_simulation/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/faulty_network_simulation/</guid><description>How to improve your software by simulating a faulty network device</description></item><item><title>Expect the unexpected</title><link>https://ilmanzo.github.io/post/faulty_disk_simulation/</link><pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/faulty_disk_simulation/</guid><description>How to improve your software by simulating a faulty block device</description></item><item><title>A trip on the rusty D-Bus</title><link>https://ilmanzo.github.io/post/a_trip_on_the_rusty_dbus/</link><pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a_trip_on_the_rusty_dbus/</guid><description>How to expose a D-Bus service and create a simple client writing some Rust code</description></item><item><title>Quiet fans on Thinkpad P15</title><link>https://ilmanzo.github.io/post/quiet_thinkpad_fans/</link><pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/quiet_thinkpad_fans/</guid><description>How to lower the default fan noise on Thinkpad P15 Gen2</description></item><item><title>Using containers for unit testing of bash functions</title><link>https://ilmanzo.github.io/post/unit_testing_bash_functions/</link><pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/unit_testing_bash_functions/</guid><description>How to create an isolate environment to safely test your bash scripts</description></item><item><title>Embed git commit hash into an executable</title><link>https://ilmanzo.github.io/post/embed_git_commit_hash_in_build/</link><pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/embed_git_commit_hash_in_build/</guid><description>How to insert the current HEAD commit hash in a binary</description></item><item><title>Old-School demo effects with Crystal</title><link>https://ilmanzo.github.io/post/crystal-demo-effects/</link><pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/crystal-demo-effects/</guid><description>revisiting old code with a new programming language</description></item><item><title>Benchmarking a Rust function</title><link>https://ilmanzo.github.io/post/advent_of_benchmark/</link><pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/advent_of_benchmark/</guid><description>A first look at Rust performance benchmarking</description></item><item><title>Debugging a problematic build</title><link>https://ilmanzo.github.io/post/inspect-obs-vm-during-build/</link><pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/inspect-obs-vm-during-build/</guid><description>A technique to inspect Open Build Service build process</description></item><item><title>a SUSE hackweek22 report</title><link>https://ilmanzo.github.io/post/suse-hackweek-2023-recap/</link><pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/suse-hackweek-2023-recap/</guid><description>writeup about learnings and achievements in last SUSE hackweek</description></item><item><title>compare package version across distros</title><link>https://ilmanzo.github.io/post/compare_package_versions_across_distros/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/compare_package_versions_across_distros/</guid><description>a tool to check if an openSUSE package version is up to date against other distros</description></item><item><title>get update info about packages</title><link>https://ilmanzo.github.io/post/check-last-update-on-packages/</link><pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/check-last-update-on-packages/</guid><description>a simple wrapper to get last update date on a package</description></item><item><title>get notifications about openQA job status</title><link>https://ilmanzo.github.io/post/openqa-jobs-notifier/</link><pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/openqa-jobs-notifier/</guid><description>how to receive notification about your openQA job status update</description></item><item><title>web components with Nim and Karax</title><link>https://ilmanzo.github.io/post/nim-frontend-web-development-with-karax/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/nim-frontend-web-development-with-karax/</guid><description>how to create a simple web component in a Karax web application</description></item><item><title>automate OTP credentials for multi-factor authentication</title><link>https://ilmanzo.github.io/post/otp-generation-from-command-line/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/otp-generation-from-command-line/</guid><description>automate generation of OTP for multi-factor authentication</description></item><item><title>linux resource control with cgroups</title><link>https://ilmanzo.github.io/post/linux-resource-control-with-cgroups/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/linux-resource-control-with-cgroups/</guid><description>using systemd slices to manage resources</description></item><item><title>integration between Python and Rust - Part 2</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-rust-2/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-rust-2/</guid><description>some experiments with language FFI</description></item><item><title>integration between Python and Rust - Part 1</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-rust-1/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-rust-1/</guid><description>some experiments with language FFI</description></item><item><title>playing with eBPF interface - 2</title><link>https://ilmanzo.github.io/post/tracing-with-ebpf-02/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/tracing-with-ebpf-02/</guid><description>some fun experiments with tracing and snooping linux kernel</description></item><item><title>playing with eBPF interface - 1</title><link>https://ilmanzo.github.io/post/playing-with-ebpf-01/</link><pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/playing-with-ebpf-01/</guid><description>some fun experiments with tracing and snooping linux kernel</description></item><item><title>a 'pythonic' fileinput module for the D programming language</title><link>https://ilmanzo.github.io/post/fileinput-for-d-programming-language/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/fileinput-for-d-programming-language/</guid><description>an implementation of a custom iterator similar to Python&amp;#39;s fileinput</description></item><item><title>Writing Python modules in Nim</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-nim/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-nim/</guid><description>how to write a Python module using the Nim programming language</description></item><item><title>A new project to learn the Crystal Programming Language</title><link>https://ilmanzo.github.io/post/a-new-project-to-learn-the-crystal-programming-language/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-new-project-to-learn-the-crystal-programming-language/</guid><description>learn the crystal programming language by solving simple exercises</description></item><item><title>Hijack C library functions in D</title><link>https://ilmanzo.github.io/post/hijack-c-library-function-in-d/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/hijack-c-library-function-in-d/</guid><description>&lt;p>I like playing with the &lt;a href="https://dlang.org/">D programming language&lt;/a> and I wrote this little post to show how it&amp;rsquo;s easy to create a dynamic library (shared object, &lt;code>.so&lt;/code>) that can be invoked in other programs; to have a little fun we will write a D replacement for the &lt;code>rand()&lt;/code> C standard library function call. For your convenience, all the code is also &lt;a href="https://github.com/ilmanzo/hijack_C_stdlib_func_with_D">on github&lt;/a>&lt;/p>
&lt;p>Let&amp;rsquo;s start with the demo implementation, a C program that calls 10 times the stdlib function &lt;code>rand()&lt;/code> to get a random number.&lt;/p></description></item><item><title>a very simple NTP client in D</title><link>https://ilmanzo.github.io/post/a-simple-ntp-client-in-d/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-ntp-client-in-d/</guid><description>&lt;p>I am quite a fan of the &lt;a href="https://dlang.org/">D programming language&lt;/a> and I think it deserves more attention, even if since a few months it&amp;rsquo;s becoming more and more popular, as it gained top20 in the &lt;a href="https://www.tiobe.com/tiobe-index/">TIOBE Index&lt;/a> for February 2020.&lt;/p>
&lt;p>As an experiment in network programming, I took &lt;a href="https://github.com/SanketDG/c-projects/blob/master/ntp-client.c">this simple NTP client&lt;/a> written in C and translated to D ; in my opinion while it&amp;rsquo;s keeping the low-level nature, it&amp;rsquo;s shorter, clearer and more effective. It&amp;rsquo;s only a dozen lines of code, but full program is available &lt;a href="https://github.com/ilmanzo/ntpclient">on my github&lt;/a>; stars and contributions are welcome!&lt;/p></description></item><item><title>migrating a repository from mercurial to git</title><link>https://ilmanzo.github.io/post/migrating-a-repository-from-mercurial-to-git/</link><pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/migrating-a-repository-from-mercurial-to-git/</guid><description>&lt;p>Since &lt;a href="https://bitbucket.org/blog/sunsetting-mercurial-support-in-bitbucket">bitbucket is sunsetting the support for mercurial repositories&lt;/a>, I wrote a quick and dirty script to automate the migration from mercurial to GIT:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>set -e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set -u
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$#&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -ne &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Illegal number of parameters&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;usage: migrate.sh reponame hgrepourl gitrepourl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>REPONAME&lt;span style="color:#f92672">=&lt;/span>$1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HGURL&lt;span style="color:#f92672">=&lt;/span>$2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GITURL&lt;span style="color:#f92672">=&lt;/span>$3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;Migrating &lt;/span>$REPONAME&lt;span style="color:#e6db74"> from &lt;/span>$HGURL&lt;span style="color:#e6db74"> to &lt;/span>$GITURL&lt;span style="color:#e6db74">...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hg clone $HGURL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd $REPONAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hg bookmark -r default master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hg bookmarks hg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mv $REPONAME &lt;span style="color:#e6db74">${&lt;/span>REPONAME&lt;span style="color:#e6db74">}&lt;/span>_hg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir &lt;span style="color:#e6db74">${&lt;/span>REPONAME&lt;span style="color:#e6db74">}&lt;/span>_git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd &lt;span style="color:#e6db74">${&lt;/span>REPONAME&lt;span style="color:#e6db74">}&lt;/span>_git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init --bare .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ../&lt;span style="color:#e6db74">${&lt;/span>REPONAME&lt;span style="color:#e6db74">}&lt;/span>_hg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hg push ../&lt;span style="color:#e6db74">${&lt;/span>REPONAME&lt;span style="color:#e6db74">}&lt;/span>_git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ../&lt;span style="color:#e6db74">${&lt;/span>REPONAME&lt;span style="color:#e6db74">}&lt;/span>_git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add hgmigrate $GITURL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push hgmigrate master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf /tmp/&lt;span style="color:#e6db74">${&lt;/span>REPONAME&lt;span style="color:#e6db74">}&lt;/span>_hg /tmp/&lt;span style="color:#e6db74">${&lt;/span>REPONAME&lt;span style="color:#e6db74">}&lt;/span>_git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;...done&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Before running the script, you only need to install git and create a git repository (remote or local).&lt;/p></description></item><item><title>il linguaggio Lua: parte 14</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-14/</link><pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-14/</guid><description>introduzione al linguaggio Lua</description></item><item><title>il linguaggio Lua: parte 13</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-13/</link><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-13/</guid><description>introduzione al linguaggio Lua</description></item><item><title>il linguaggio Lua: parte 12</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-12/</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-12/</guid><description>introduzione al linguaggio Lua</description></item><item><title>il linguaggio Lua: parte 11</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-11/</link><pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-11/</guid><description>introduzione al linguaggio Lua</description></item><item><title>il linguaggio Lua: parte 10</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-10/</link><pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-10/</guid><description>introduzione al linguaggio Lua</description></item><item><title>a honeypot ssh server in Go</title><link>https://ilmanzo.github.io/post/a-honeypot-ssh-server-in-go/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-honeypot-ssh-server-in-go/</guid><description>a fake ssh server that works as a honeypot, written in Go</description></item><item><title>il linguaggio Lua: parte 9</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-09/</link><pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-09/</guid><description>introduzione al linguaggio Lua</description></item><item><title>il linguaggio Lua: ottava parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-08/</link><pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-08/</guid><description>introduzione al linguaggio Lua</description></item><item><title>il linguaggio Lua: settima parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-07/</link><pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-07/</guid><description>introduzione al linguaggio Lua</description></item><item><title>a simple PNG decoder in Go</title><link>https://ilmanzo.github.io/post/a-simple-png-decoder/</link><pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-png-decoder/</guid><description>&lt;p>while working with image files, I needed a simple way to analyze content of a picture; so I wrote this tool that &amp;ldquo;walks&amp;rdquo; inside a PNG file and reports all the chunks seen; this is intended to be expanded with more features in a future.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;encoding/binary&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">chunk&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Length&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ChunkType&lt;/span> [&lt;span style="color:#ae81ff">4&lt;/span>]&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Args&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Usage: %s filename.png\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Args&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Exit&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Args&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">header&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">header&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;header: %v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">header&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#a6e22e">chunk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">offset&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">offset&lt;/span> = &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">binary&lt;/span>.&lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">binary&lt;/span>.&lt;span style="color:#a6e22e">BigEndian&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">EOF&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Offset: %d chunk len=%d, type: %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">offset&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">Length&lt;/span>, string(&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">ChunkType&lt;/span>[:&lt;span style="color:#ae81ff">4&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Seek&lt;/span>(int64(&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">Length&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>), &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">SeekCurrent&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">offset&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> int64(&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">Length&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>usage:&lt;/p></description></item><item><title>il linguaggio Lua: sesta parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-06/</link><pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-06/</guid><description>introduzione al linguaggio Lua</description></item><item><title>linux: how to access DHCP options from client</title><link>https://ilmanzo.github.io/post/access-dhcp-options-from-client/</link><pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/access-dhcp-options-from-client/</guid><description>how to access DHCP options from client</description></item><item><title>il linguaggio Lua: quinta parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-05/</link><pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-05/</guid><description>introduzione al linguaggio Lua</description></item><item><title>il linguaggio Lua: parte 4</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-04/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-04/</guid><description>introduzione al linguaggio Lua</description></item><item><title>il linguaggio Lua: parte 3</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-03/</link><pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-03/</guid><description>introduzione al linguaggio Lua</description></item><item><title>convert a binary file to ascii using hexdump</title><link>https://ilmanzo.github.io/post/hexdump-for-binary-file-manipulation/</link><pubDate>Thu, 20 Oct 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/hexdump-for-binary-file-manipulation/</guid><description>convert a binary file to ascii using hexdump</description></item><item><title>playing with Crystal Programming Language</title><link>https://ilmanzo.github.io/post/playing-with-crystal-programming-language/</link><pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/playing-with-crystal-programming-language/</guid><description>exploring new languages</description></item><item><title>a simple HTTP rewriting proxy</title><link>https://ilmanzo.github.io/post/a-simple-http-rewriting-proxy/</link><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-http-rewriting-proxy/</guid><description>&lt;p>This is an example of using &lt;a href="https://github.com/elazarl/goproxy">goproxy&lt;/a>, a fast and robust multithread proxy engine to develop an HTTP proxy that rewrites content on the fly, with multiple search and substitutions. It can be useful for debugging and other less noble (but useful) purposes &amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// rewriting_proxy project main.go
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bytes&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;flag&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;io/ioutil&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/elazarl/goproxy&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">replacements&lt;/span> = []&lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">from&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">to&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {[]byte(&lt;span style="color:#e6db74">&amp;#34;#e8ecec&amp;#34;&lt;/span>), []byte(&lt;span style="color:#e6db74">&amp;#34;Red&amp;#34;&lt;/span>)}, &lt;span style="color:#75715e">// ugly colors!!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> {[]byte(&lt;span style="color:#e6db74">&amp;#34;Comic Sans MS&amp;#34;&lt;/span>), []byte(&lt;span style="color:#e6db74">&amp;#34;Lucida Sans Unicode&amp;#34;&lt;/span>)}, &lt;span style="color:#75715e">// for eyes sanity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> {[]byte(&lt;span style="color:#e6db74">&amp;#34;Java &amp;#34;&lt;/span>), []byte(&lt;span style="color:#e6db74">&amp;#34;Golang &amp;#34;&lt;/span>)}, &lt;span style="color:#75715e">// just joking
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">myHandler&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span>, &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">goproxy&lt;/span>.&lt;span style="color:#a6e22e">ProxyCtx&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">readBody&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadAll&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//TODO handle read error gracefully
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">elem&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">replacements&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">readBody&lt;/span> = &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Replace&lt;/span>(&lt;span style="color:#a6e22e">readBody&lt;/span>, &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">from&lt;/span>, &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">to&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span> = &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">NopCloser&lt;/span>(&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">readBody&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">verbose&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">Bool&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;v&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;should every proxy request be logged to stdout&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">proxy&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">goproxy&lt;/span>.&lt;span style="color:#a6e22e">NewProxyHttpServer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">proxy&lt;/span>.&lt;span style="color:#a6e22e">Verbose&lt;/span> = &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">verbose&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">proxy&lt;/span>.&lt;span style="color:#a6e22e">OnResponse&lt;/span>().&lt;span style="color:#a6e22e">DoFunc&lt;/span>(&lt;span style="color:#a6e22e">myHandler&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:8081&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">proxy&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>wrapping c plus plus classes in Python</title><link>https://ilmanzo.github.io/post/wrapping-c-plus-plus-classes-in-python/</link><pubDate>Mon, 08 Aug 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/wrapping-c-plus-plus-classes-in-python/</guid><description>&lt;p>This is a quick and dirty way to interface C++ code with Python, translating one or more C++ classes in Python objects.&lt;/p>
&lt;p>First, we need some c++ sample code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//myclass.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#ifndef MYCLASS_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define MYCLASS_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> pets {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Dog(string name, &lt;span style="color:#66d9ef">int&lt;/span> age);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#f92672">~&lt;/span>Dog();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string &lt;span style="color:#a6e22e">talk&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string m_name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> m_age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//myclass.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;myclass.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> pets {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Dog&lt;span style="color:#f92672">::&lt;/span>Dog(std&lt;span style="color:#f92672">::&lt;/span>string name, &lt;span style="color:#66d9ef">int&lt;/span> age)&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m_name(name),m_age(age) { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Dog&lt;span style="color:#f92672">::~&lt;/span>Dog() { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>string Dog&lt;span style="color:#f92672">::&lt;/span>talk() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;BARK! I am a DOG and my name is &amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>m_name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>now, we can try a little test program just to exercise our class:&lt;/p></description></item><item><title>il linguaggio Lua: parte 2</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-02/</link><pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-02/</guid><description>introduzione al linguaggio Lua</description></item><item><title>how to automatically expire mysql records after a fixed amount of time</title><link>https://ilmanzo.github.io/post/automatic-expiring-of-mysql-rows/</link><pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/automatic-expiring-of-mysql-rows/</guid><description>how to automatically delete mysql records after an amount of time</description></item><item><title>il linguaggio Lua: prima parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-01/</link><pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-01/</guid><description>introduzione al linguaggio Lua</description></item><item><title>monit helper for quota monitoring in go</title><link>https://ilmanzo.github.io/post/golang-quota-monit-helper/</link><pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/golang-quota-monit-helper/</guid><description>a small program to parse quota information and report via monit</description></item><item><title>simple and easy linux job queue</title><link>https://ilmanzo.github.io/post/simple-easy-job-queue-linux/</link><pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/simple-easy-job-queue-linux/</guid><description>exploiting linux printing queue facility to manage heterogeneous jobs</description></item><item><title>serata introduttiva al FabLab sulla programmazione Python</title><link>https://ilmanzo.github.io/post/serata-fablab/</link><pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/serata-fablab/</guid><description>&lt;p>Pubblico qui le slide che ho usato durante la serata dedicata alla programmazione Python, svoltasi presso il &lt;a href="http://www.veronafablab.it">FabLab Verona&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://ilmanzo.github.io/files/slide_serata_python_fablab_2015.html">http://ilmanzo.github.io/files/slide_serata_python_fablab_2015.html&lt;/a>&lt;/p></description></item><item><title>CGI with the Go Programming Language</title><link>https://ilmanzo.github.io/post/cgi-apps-in-go/</link><pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/cgi-apps-in-go/</guid><description>standard library of the Go Programming Language: CGI and templates</description></item><item><title>sample template usage in the Go Programming Language</title><link>https://ilmanzo.github.io/post/templating-in-go/</link><pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/templating-in-go/</guid><description>how to use the standard library template of the Go Programming Language</description></item><item><title>redirect output of an already running process</title><link>https://ilmanzo.github.io/post/redirect-output-of-running-process/</link><pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/redirect-output-of-running-process/</guid><description>how to store standard output/error of a process after the execution</description></item><item><title>Sincronizzare una directory tra due server linux</title><link>https://ilmanzo.github.io/post/simple-directory-sync/</link><pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/simple-directory-sync/</guid><description>Sincronizzare una directory tra due server linux</description></item><item><title>A new project to learn the D Programming Language</title><link>https://ilmanzo.github.io/post/a-new-project-to-learn-the-d-programming-language/</link><pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-new-project-to-learn-the-d-programming-language/</guid><description>learn D programming language by solving simple exercises</description></item><item><title>monitor apache performance statistics</title><link>https://ilmanzo.github.io/post/logging-apache-performance-historical-statistics/</link><pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/logging-apache-performance-historical-statistics/</guid><description>how to use apache mod_status to collect performance statistics</description></item><item><title>Linux: get simple I/O statistics per process</title><link>https://ilmanzo.github.io/post/simple-io-statistics-per-process/</link><pubDate>Fri, 22 Aug 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/simple-io-statistics-per-process/</guid><description>&lt;p>I had a trouble with a long process running and wish to know how much I/O
this process is doing, so I wrote this quick and dirty python 2.x script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> time&lt;span style="color:#f92672">,&lt;/span>sys&lt;span style="color:#f92672">,&lt;/span>datetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">read_stat&lt;/span>(pid):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">=&lt;/span>open(&lt;span style="color:#e6db74">&amp;#34;/proc/&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">/io&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> pid ,&lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>startswith(&lt;span style="color:#e6db74">&amp;#39;rchar&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rchar&lt;span style="color:#f92672">=&lt;/span>line&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>startswith(&lt;span style="color:#e6db74">&amp;#39;wchar&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wchar&lt;span style="color:#f92672">=&lt;/span>line&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> int(rchar),int(wchar)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pid&lt;span style="color:#f92672">=&lt;/span>sys&lt;span style="color:#f92672">.&lt;/span>argv[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r0,w0 &lt;span style="color:#f92672">=&lt;/span> read_stat(pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r1,w1 &lt;span style="color:#f92672">=&lt;/span> read_stat(pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\t\t&lt;/span>&lt;span style="color:#e6db74">r=&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\t\t&lt;/span>&lt;span style="color:#e6db74">w=&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> (datetime&lt;span style="color:#f92672">.&lt;/span>datetime&lt;span style="color:#f92672">.&lt;/span>now()&lt;span style="color:#f92672">.&lt;/span>time(),r1&lt;span style="color:#f92672">-&lt;/span>r0,w1&lt;span style="color:#f92672">-&lt;/span>w0)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r0,w0&lt;span style="color:#f92672">=&lt;/span>r1,w1&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>You must give the process PID number as input to the script. In the output you
get the read/write throughput of the process in bytes per second, for instance:&lt;/p></description></item><item><title>how to setup disk redundancy with BTRFS filesystem</title><link>https://ilmanzo.github.io/post/btrfs-mirroring/</link><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/btrfs-mirroring/</guid><description>how to setup disk redundancy with BTRFS filesystem</description></item><item><title>Compress and encrypt your backups</title><link>https://ilmanzo.github.io/post/compress-and-encrypt-your-remote-backups/</link><pubDate>Wed, 11 Jun 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/compress-and-encrypt-your-remote-backups/</guid><description>How to securely backup your files in a remote location</description></item><item><title>how to display the IP address of a virtual machine before logon</title><link>https://ilmanzo.github.io/post/know-your-vm-address-before-logon/</link><pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/know-your-vm-address-before-logon/</guid><description>a small trick to save time when using linux virtual machines</description></item><item><title>dovecot: cleaning old Spam and Trash messages after some days</title><link>https://ilmanzo.github.io/post/postfix-dovecot-cleanup-virtual-folders/</link><pubDate>Wed, 05 Mar 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/postfix-dovecot-cleanup-virtual-folders/</guid><description>a script to do maintenance of a small number of mail folders</description></item><item><title>number of physical sockets and cpu cores</title><link>https://ilmanzo.github.io/post/sockets-and-cores/</link><pubDate>Sat, 14 Sep 2013 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/sockets-and-cores/</guid><description>how to find out how much your next licence will cost...</description></item><item><title>Automate Cisco ssh connections with plink in Windows</title><link>https://ilmanzo.github.io/post/plink-automation/</link><pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/plink-automation/</guid><description>&lt;p>A quick and dirty way to send a bunch of commands to any ssh device (in my case, Cisco appliances)&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>create a plain old batch file with commands echoed inside:&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>execute the batch, piping its output to &lt;a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">plink.exe&lt;/a>
(putty command link ssh client):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> c:\&amp;gt; commands.bat | plink -ssh -l username -pw password 11.22.33.44
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>semplice rate limit in Sinatra</title><link>https://ilmanzo.github.io/post/semplice-rate-limit-in-sinatra/</link><pubDate>Fri, 21 Dec 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/semplice-rate-limit-in-sinatra/</guid><description>&lt;p>Giocando con &lt;a href="http://www.sinatrarb.com/">Sinatra&lt;/a> ho avuto l&amp;rsquo;esigenza di servire una determinata pagina solo con un certa frequenza (tecnicamente un &lt;strong>rate-limit&lt;/strong>); la cosa si puo&amp;rsquo; fare installando il &lt;em>middleware&lt;/em> &lt;a href="https://github.com/datagraph/rack-throttle">Rack:Throttle&lt;/a> ma non volevo aggiungere un&amp;rsquo;altra gemma alle dipendenze&amp;hellip;&lt;/p>
&lt;p>In questo esempio se al server arriva piu&amp;rsquo; di una richiesta in un intervallo di cinque secondi, rispondiamo a tono&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SECONDS_BETWEEN_REQUEST&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enable &lt;span style="color:#e6db74">:sessions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">ratelimit?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">Time&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new&lt;span style="color:#f92672">.&lt;/span>to_i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;lastrequest&amp;#39;&lt;/span>&lt;span style="color:#f92672">]||=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#75715e">#inizializza se non presente&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#f92672">=&lt;/span>(now&lt;span style="color:#f92672">-&lt;/span>session&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;lastrequest&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>)&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">SECONDS_BETWEEN_REQUEST&lt;/span> &lt;span style="color:#75715e">#passati dall&amp;#39;ultima richiesta ?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;lastrequest&amp;#39;&lt;/span>&lt;span style="color:#f92672">]=&lt;/span>now &lt;span style="color:#75715e"># aggiorna&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>get &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ratelimit?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;h1&amp;gt;sorry, rate limit exceeded!&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;h1&amp;gt;hello!&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>run-parts e problemi di crontab</title><link>https://ilmanzo.github.io/post/run-parts-problemi-crontab/</link><pubDate>Thu, 06 Dec 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/run-parts-problemi-crontab/</guid><description>&lt;p>Mi e&amp;rsquo; capitato di inserire degli script nelle varie directory
/etc/cron.daily, /etc/cron.weekly
ma di scoprire che questi script non vengono eseguiti.
Il motivo e&amp;rsquo; che il run-parts usato nelle Debian e derivate ignora i file che contengono un &amp;ldquo;.&amp;rdquo; (e quindi tutti quelli con l&amp;rsquo;estensione)&lt;/p>
&lt;p>Questo comportamento e&amp;rsquo; &lt;a href="http://www.oreillynet.com/linux/blog/2007/08/runparts_scripts_a_note_about.html">documentato&lt;/a> anche nella man page, e previene alcuni inconvenienti come l&amp;rsquo;esecuzione dei &lt;strong>.bak&lt;/strong> ma lo scrivo anche qui per ricordarmelo &amp;hellip; E forse potra&amp;rsquo; essere utile a qualcun altro :)&lt;/p></description></item><item><title>generare comandi di creazione utenze a partire da un passwd</title><link>https://ilmanzo.github.io/post/generare-comandi-di-creazione-utenze-a-partire-da-un-passwd/</link><pubDate>Fri, 23 Nov 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/generare-comandi-di-creazione-utenze-a-partire-da-un-passwd/</guid><description>&lt;p>A volte e&amp;rsquo; necessario replicare le utenze con gli stessi parametri su piu&amp;rsquo; server linux diversi.&lt;/p>
&lt;p>Perche&amp;rsquo; farlo a mano ? Se sono tanti e&amp;rsquo; un lavoro noioso e potremmo anche commettere degli errori.&lt;/p>
&lt;p>Ecco un semplice &lt;em>one-liner&lt;/em> che fa il parsing di un file &lt;strong>/etc/passwd&lt;/strong> e genera
i corrispondenti comandi &lt;strong>useradd&lt;/strong>&lt;/p>
&lt;pre>&lt;code>awk -F: '{printf &amp;quot;useradd -m -u%s -g%s -d%s -s%s %s\n&amp;quot; , $3,$4,$6,$7,$1}' /etc/passwd
&lt;/code>&lt;/pre>
&lt;p>Ovviamente l&amp;rsquo;output puo&amp;rsquo; essere comodamente filtrato con grep, usato via copy&amp;amp;paste, inserito in uno script, eccetera&amp;hellip;&lt;/p></description></item><item><title>gestire i led delle schede PC Engines ALIX in Ruby</title><link>https://ilmanzo.github.io/post/gestire-i-led-delle-schede-pc-engines-alix/</link><pubDate>Fri, 09 Nov 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/gestire-i-led-delle-schede-pc-engines-alix/</guid><description>&lt;p>Natale si avvicina: mentre smanettavo su queste ottime &lt;a href="http://pcengines.ch/alix.htm">PC Engines ALIX&lt;/a> su cui ho installato una &lt;a href="http://code.google.com/p/debian-for-alix/">Debian modificata&lt;/a>,
ho scritto una comoda interfaccia per accendere/spegnere e far lampeggiare i led alla velocita&amp;rsquo; desiderata&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Led&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#numero da 1 a 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(ledno)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ledno&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#75715e"># passo 0 ma comando 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ledno&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> ledno&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ledno&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> ledno&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @ledsyspath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/sys/devices/platform/leds_alix2/leds/alix:&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>ledno&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">blink&lt;/span>(millisec)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>open(@ledsyspath&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;trigger&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) { &lt;span style="color:#f92672">|&lt;/span>f&lt;span style="color:#f92672">|&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;timer&amp;#39;&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>open(@ledsyspath&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;delay_off&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#f92672">|&lt;/span>f&lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(millisec&lt;span style="color:#f92672">.&lt;/span>to_s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>open(@ledsyspath&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;delay_on&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#f92672">|&lt;/span>f&lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(millisec&lt;span style="color:#f92672">.&lt;/span>to_s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">blink_slow!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blink(&lt;span style="color:#ae81ff">500&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">blink_fast!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blink(&lt;span style="color:#ae81ff">50&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">on!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>open(@ledsyspath&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;trigger&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) { &lt;span style="color:#f92672">|&lt;/span>f&lt;span style="color:#f92672">|&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;default-on&amp;#39;&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>open(@ledsyspath&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;brightness&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#f92672">|&lt;/span>f&lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;1&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">off!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>open(@ledsyspath&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;trigger&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) { &lt;span style="color:#f92672">|&lt;/span>f&lt;span style="color:#f92672">|&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#34;none&amp;#34;&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">File&lt;/span>&lt;span style="color:#f92672">.&lt;/span>open(@ledsyspath&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#39;brightness&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#f92672">|&lt;/span>f&lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>background tasks in Ruby e linux</title><link>https://ilmanzo.github.io/post/background-tasks-in-ruby-e-linux/</link><pubDate>Mon, 05 Nov 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/background-tasks-in-ruby-e-linux/</guid><description>&lt;p>A volte negli script Ruby ho bisogno di controllare l&amp;rsquo;esecuzione di un comando eseguito in modalita&amp;rsquo; asincrona, ho creato pertanto una classe apposita:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BackgroundJob&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(cmd)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @pid &lt;span style="color:#f92672">=&lt;/span> fork &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># this code is run in the child process&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># you can do anything here, like changing current directory or reopening STDOUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exec cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">stop!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># kill it (other signals than TERM may be used, depending on the program you want&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># to kill. The signal KILL will always work but the process won&amp;#39;t be allowed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># to cleanup anything)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">Process&lt;/span>&lt;span style="color:#f92672">.&lt;/span>kill &lt;span style="color:#e6db74">&amp;#34;TERM&amp;#34;&lt;/span>, @pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># you have to wait for its termination, otherwise it will become a zombie process&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># (or you can use Process.detach)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">Process&lt;/span>&lt;span style="color:#f92672">.&lt;/span>wait @pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>come si usa ? Molto semplice:&lt;/p></description></item><item><title>Enerduino</title><link>https://ilmanzo.github.io/post/enerduino/</link><pubDate>Sat, 03 Nov 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/enerduino/</guid><description>il porting del progetto per il nuovo IDE Arduino 1.0</description></item><item><title>Linux Day 2012</title><link>https://ilmanzo.github.io/post/linux-day-2012/</link><pubDate>Sat, 03 Nov 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/linux-day-2012/</guid><description>&lt;p>Anche quest&amp;rsquo;anno ho avuto il piacere di partecipare al Linux Day,
organizzato per Verona presso la sede del &lt;a href="http://www.lugverona.it/linux-day-2012/">LUG Verona&lt;/a> in via dei Gelsi a Montorio;
Ho tenuto una breve presentazione su un argomento che mi sta a cuore:
partecipare attivamente alla comunita&amp;rsquo; del software libero,
perche&amp;rsquo; anche se ormai Linux e Il free software hanno una discreta diffusione, la
maggior parte degli utenti si limita all&amp;rsquo;utilizzo passivo e anzi spesso si lamenta per
la scarsa qualita&amp;rsquo; del software open. Il software libero &lt;strong>NON&lt;/strong> e&amp;rsquo; solo avere programmi gratis!
Vorrei invitare chiunque a &amp;ldquo;passare dall&amp;rsquo;altra parte&amp;rdquo; e abbandonare il comodo stato di
&amp;ldquo;spettatori&amp;rdquo; per cominciare a dare il proprio contributo, ognuno per quello che puo'.&lt;/p></description></item></channel></rss>