<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>C++ on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/c++/</link><description>Recent content in C++ on ilManzo's blog</description><generator>Hugo -- 0.125.5</generator><language>en-us</language><copyright>2012-2024 Andrea Manzini</copyright><lastBuildDate>Mon, 08 Aug 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>wrapping c plus plus classes in Python</title><link>https://ilmanzo.github.io/post/wrapping-c-plus-plus-classes-in-python/</link><pubDate>Mon, 08 Aug 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/wrapping-c-plus-plus-classes-in-python/</guid><description>This is a quick and dirty way to interface C++ code with Python, translating one or more C++ classes in Python objects.
First, we need some c++ sample code:
//myclass.h #ifndef MYCLASS_H #define MYCLASS_H #include &amp;lt;string&amp;gt; using namespace std; namespace pets { class Dog { public: Dog(string name, int age); virtual ~Dog(); string talk(); protected: string m_name; int m_age; }; } //myclass.cpp #include &amp;#34;myclass.h&amp;#34; #include &amp;lt;string&amp;gt; namespace pets { Dog::Dog(std::string name, int age): m_name(name),m_age(age) { } Dog::~Dog() { } std::string Dog::talk() { return &amp;#34;BARK!</description></item></channel></rss>