<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/go/</link><description>Recent content in go on ilManzo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2012-2023 Andrea Manzini</copyright><lastBuildDate>Tue, 26 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>a honeypot ssh server in Go</title><link>https://ilmanzo.github.io/post/a-honeypot-ssh-server-in-go/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-honeypot-ssh-server-in-go/</guid><description>&lt;h2 id="honey-ssh-pot">honey-ssh-pot&lt;/h2>
&lt;p>Curious about who and how attempts ssh login to your home server ? Me too&amp;hellip; So I wrote a very simple ssh honeypot, just to collect interesting info about the kind guys who knocks my door :)&lt;/p>
&lt;p>warning: this is safe, but don&amp;rsquo;t run the service (well, ANY service) as root user. Even better if you can run it as a dedicate unprivileged user.&lt;/p>
&lt;p>This program is only for didactic use and not intended for deployment in a production network environment.&lt;/p>
&lt;p>If you want to have it exposed on the public internet, you must map port 22 of your wan router to the internal server port ( 2222 by default)&amp;hellip; Do it at your risk!&lt;/p></description></item><item><title>a simple PNG decoder in Go</title><link>https://ilmanzo.github.io/post/a-simple-png-decoder/</link><pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-png-decoder/</guid><description>while working with image files, I needed a simple way to analyze content of a picture; so I wrote this tool that &amp;ldquo;walks&amp;rdquo; inside a PNG file and reports all the chunks seen; this is intended to be expanded with more features in a future.
package main import ( &amp;#34;encoding/binary&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;os&amp;#34; ) type chunk struct { Length uint32 ChunkType [4]byte } func main() { if len(os.Args) != 2 { fmt.</description></item><item><title>a simple HTTP rewriting proxy</title><link>https://ilmanzo.github.io/post/a-simple-http-rewriting-proxy/</link><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-http-rewriting-proxy/</guid><description>This is an example of using goproxy, a fast and robust multithread proxy engine to develop an HTTP proxy that rewrites content on the fly, with multiple search and substitutions. It can be useful for debugging and other less noble (but useful) purposes &amp;hellip;
// rewriting_proxy project main.go package main import ( &amp;#34;bytes&amp;#34; &amp;#34;flag&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.com/elazarl/goproxy&amp;#34; ) var replacements = []struct { from []byte to []byte }{ {[]byte(&amp;#34;#e8ecec&amp;#34;), []byte(&amp;#34;Red&amp;#34;)}, // ugly colors!</description></item><item><title>monit helper for quota monitoring in go</title><link>https://ilmanzo.github.io/post/golang-quota-monit-helper/</link><pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/golang-quota-monit-helper/</guid><description>I want to keep under control a system where each user has an amount of filesystem quota reserved; in particular I would like to get notified if and when a user exceeds some treshold. Since I already have Monit in place in the server, I took the chance to write a small Go utility in order to retrieve the quota percentage.
This is also an example on how to run external programs in Go and filter the output using regular expressions.</description></item><item><title>CGI with the Go Programming Language</title><link>https://ilmanzo.github.io/post/cgi-apps-in-go/</link><pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/cgi-apps-in-go/</guid><description>Following with the GO standard library exploration, I&amp;rsquo;ve written a toy example for using the CGI features. Native GoLang CGI web applications are very fast and can be useful for example in embedded systems, or in cheap web hosting where is not possible to run custom HTTP servers. The solution has some weak points, starting from lock management, but is only presented as a proof of concept and not for real use cases.</description></item><item><title>sample template usage in the Go Programming Language</title><link>https://ilmanzo.github.io/post/templating-in-go/</link><pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/templating-in-go/</guid><description>The GO programming language has a nice and useful standard library, which includes a powerful templating engine out of the box.
Here I wrote an example, generating HTML output from a simple data structure.
This program generates the following HTML output:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;my todo list&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;my TODO list&amp;lt;/h1&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; 1 Take out the dog &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; 2 Feed the cat &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; 3 Learn GO programming &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; Next step: use the template to provide interactive web pages &amp;hellip;</description></item></channel></rss>