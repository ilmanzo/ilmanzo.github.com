<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hacking on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/hacking/</link><description>Recent content in hacking on ilManzo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2012-2023 Andrea Manzini</copyright><lastBuildDate>Tue, 14 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/hacking/index.xml" rel="self" type="application/rss+xml"/><item><title>automate OTP credentials for multi-factor authentication</title><link>https://ilmanzo.github.io/post/otp-generation-from-command-line/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/otp-generation-from-command-line/</guid><description>Background: I work with one or more terminal command-line always opened and having to pick up my phone to generate an OTP breaks my flow; also it&amp;rsquo;s always nice to have an alternate source of multi-factor authentication if something bad happens, one day you could lose or break your trusty mobile device.
Therefore I was looking for a way to login through Okta portals without a phone. You may argument that this defeats the whole meaning of MFA, but let&amp;rsquo;s say it&amp;rsquo;s only an hack for research and fun purpose &amp;hellip;</description></item><item><title>Hijack C library functions in D</title><link>https://ilmanzo.github.io/post/hijack-c-library-function-in-d/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/hijack-c-library-function-in-d/</guid><description>I like playing with the D programming language and I wrote this little post to show how it&amp;rsquo;s easy to create a dynamic library (shared object, .so) that can be invoked in other programs; to have a little fun we will write a D replacement for the rand() C standard library function call. For your convenience, all the code is also on github
Let&amp;rsquo;s start with the demo implementation, a C program that calls 10 times the stdlib function rand() to get a random number.</description></item><item><title>a honeypot ssh server in Go</title><link>https://ilmanzo.github.io/post/a-honeypot-ssh-server-in-go/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-honeypot-ssh-server-in-go/</guid><description>&lt;h2 id="honey-ssh-pot">honey-ssh-pot&lt;/h2>
&lt;p>Curious about who and how attempts ssh login to your home server ? Me too&amp;hellip; So I wrote a very simple ssh honeypot, just to collect interesting info about the kind guys who knocks my door :)&lt;/p>
&lt;p>warning: this is safe, but don&amp;rsquo;t run the service (well, ANY service) as root user. Even better if you can run it as a dedicate unprivileged user.&lt;/p>
&lt;p>This program is only for didactic use and not intended for deployment in a production network environment.&lt;/p>
&lt;p>If you want to have it exposed on the public internet, you must map port 22 of your wan router to the internal server port ( 2222 by default)&amp;hellip; Do it at your risk!&lt;/p></description></item><item><title>a simple PNG decoder in Go</title><link>https://ilmanzo.github.io/post/a-simple-png-decoder/</link><pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-png-decoder/</guid><description>while working with image files, I needed a simple way to analyze content of a picture; so I wrote this tool that &amp;ldquo;walks&amp;rdquo; inside a PNG file and reports all the chunks seen; this is intended to be expanded with more features in a future.
package main import ( &amp;#34;encoding/binary&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;os&amp;#34; ) type chunk struct { Length uint32 ChunkType [4]byte } func main() { if len(os.Args) != 2 { fmt.</description></item><item><title>a simple HTTP rewriting proxy</title><link>https://ilmanzo.github.io/post/a-simple-http-rewriting-proxy/</link><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-http-rewriting-proxy/</guid><description>This is an example of using goproxy, a fast and robust multithread proxy engine to develop an HTTP proxy that rewrites content on the fly, with multiple search and substitutions. It can be useful for debugging and other less noble (but useful) purposes &amp;hellip;
// rewriting_proxy project main.go package main import ( &amp;#34;bytes&amp;#34; &amp;#34;flag&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.com/elazarl/goproxy&amp;#34; ) var replacements = []struct { from []byte to []byte }{ {[]byte(&amp;#34;#e8ecec&amp;#34;), []byte(&amp;#34;Red&amp;#34;)}, // ugly colors!</description></item></channel></rss>