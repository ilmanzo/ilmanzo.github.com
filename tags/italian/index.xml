<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>italian on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/italian/</link><description>Recent content in italian on ilManzo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2022 Andrea Manzini</copyright><lastBuildDate>Fri, 15 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/italian/index.xml" rel="self" type="application/rss+xml"/><item><title>il linguaggio Lua: parte 14</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-14/</link><pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-14/</guid><description>segue dalla parte 13
Coroutine Come approccio alla programmazione concorrente, il linguaggio Lua non ha meccanismi interni per gestire nativamente i thread, ma si può appoggiare a ciò che offre il sistema operativo sottostante. Lua invece internamente offre il supporto alle coroutine: un programma Lua può avere diversi percorsi di esecuzione &amp;lsquo;parallela&amp;rsquo; ognuno col proprio stack e variabili locali ma che condividono risorse e variabili globali con le altre coroutine.</description></item><item><title>il linguaggio Lua: parte 13</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-13/</link><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-13/</guid><description>segue dalla parte 12
Upvalue e Closure Per chi non ha familiarità con i concetti di programmazione funzionale questi termini possono sembrare un po’ oscuri; vediamo di chiarirli con un semplice esempio:
-- definisco una funzione che parte da un numero N e conta alla rovescia function CreaContatore(N) local v=N local function conta(x) if v&amp;gt;=x then v=v-x end return v end return conta end -- creo qualche istanza: contaDaDieci=CreaContatore(10) contaDaCento=CreaContatore(100) print(contaDaDieci(1)) 9 print(contaDaCento(1)) 99 print(contaDaCento(1)) 98 print(contaDaDieci(1)) 8 print(contaDaDieci(2)) 6 print(contaDaCento(10)) 88 osserviamo le variabili N,v che usate dalla funzione interna: non sono locali, ma nemmeno globali&amp;hellip; Sono upvalue, ovvero riferimenti che provengono da uno stackframe esterno.</description></item><item><title>il linguaggio Lua: parte 12</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-12/</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-12/</guid><description>segue dalla parte 11
segnalazioni lunari Tra le rocks più interessanti citiamo quelle che permettono le operazioni di networking, come luasocket; salendo di livello, spicca il Kepler project, che comprende un intero stack per applicazioni web: Lapis micro framework, il framework MVC Sailor, e TurboLua, un tool per costuire velocissimi microservizi REST .
Concludiamo la panoramica sulle librerie accennando ai moduli per creare interfacce grafiche; al pari degli altri linguaggi di scripting, Lua offre binding per i maggiori toolkit grafici: curses, GTK, QT, fltk, wx si usano come negli altri linguaggi e sarebbe qui tedioso illustrarne le modalità.</description></item><item><title>il linguaggio Lua: parte 11</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-11/</link><pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-11/</guid><description>segue dalla parte 10
Rocce di Luna Poter organizzare il codice in più file è molto utile per modularizzare i programmi, creando package che verranno caricati tramite l&amp;rsquo;istruzione require “nomefile”. Vediamo un esempio:
-- geompkg.lua module(&amp;#34;geom&amp;#34;) local function quadrato(x) return x*x end local function rettangolo(b,h) return b*h end function area(param) if param.lato then return quadrato(param.lato) end local area=rettangolo(param.base,param.altezza) if param.triangolo or param.trapezio then return area/2 end return area end -- usepkg.</description></item><item><title>il linguaggio Lua: parte 10</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-10/</link><pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-10/</guid><description>segue dalla parte 9
stringhe e regular expression in questa puntata apriremo una piccola digressione per analizzare le funzionalità del modulo string, in particolare l&amp;rsquo;uso delle regular expression.
Il modulo string ci mette a disposizione potenti funzioni di ricerca e sostituzione basate su espressioni regolari. Una completa implementazione delle regexp POSIX occuperebbe più dell&amp;rsquo;intero linguaggio, ma tutto sommato le funzionalità principali sono state mantenute, e gli autori di Lua sono riusciti a impacchettare un “motore” di pattern matching in meno di 500 righe di codice.</description></item><item><title>il linguaggio Lua: parte 9</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-09/</link><pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-09/</guid><description>segue dalla parte 8
il modulo lunare Per mantenere la sua natura minimalista, Lua ha ben poche funzionalità incluse nel linguaggio e delega molti aspetti a librerie e moduli esterni. Ad esempio le operazioni matematiche sono accessibili nel package, o se preferite, namespace col prefisso math:
$ lua &amp;gt;print(math.sin(math.pi/2)) 1 sarebbe oltremodo noioso elencare tutte le funzioni presenti, basti dire che oltre alle funzioni trigonometriche abbiamo logaritmi, esponenziali, modulo, minimo, massimo, arrotondamenti e generazione di valori random.</description></item><item><title>il linguaggio Lua: ottava parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-08/</link><pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-08/</guid><description>segue dalla settima parte
Oggetti volanti e non Lua non è un linguaggio nativamente object-oriented. Se nei nostri script volessimo adottare uno stile OOP, ad esempio per modellare le operazioni su un conto corrente la cosa più naturale sarebbe usare una tabella:
Conto = { saldo = 200.0 } Questa sintassi potrebbe essere assimilata al &amp;lsquo;costruttore&amp;rsquo; dell&amp;rsquo;oggetto Conto. Possiamo anche definire dei metodi:
function Conto.preleva(cifra) Conto.saldo = Conto.saldo - cifra end e quindi potremmo comodamente chiamare, problemi economici a parte:</description></item><item><title>il linguaggio Lua: settima parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-07/</link><pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-07/</guid><description>segue dalla sesta parte
Iteratori e lua funzionale Cos&amp;rsquo;è un iteratore? Informaticamente parlando, è un costrutto che ci permette di scorrere strutture dati come liste, array, elenchi. In pratica, dato un elemento della struttura il compito dell&amp;rsquo;iteratore è farci avere il prossimo su cui operare. Non ci stupirà apprendere che in Lua gli iteratori sono funzioni. Vediamo un semplice esempio:
function reverse_iter(t) local i=#t+1 return function() i=i-1 if i&amp;gt;=0 then return t[i] end end end reverse_iter è una fabbrica (factory) di funzioni: ogni volta che la chiamiamo, ci crea una nuova closure, ossia l&amp;rsquo;iteratore specifico per l&amp;rsquo;array che gli passiamo.</description></item><item><title>il linguaggio Lua: sesta parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-06/</link><pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-06/</guid><description>segue dalla quinta parte
Quando il saggio indica la luna, lo sciocco guarda il dito Nello scorse puntate abbiamo appreso le basi di un linguaggio minimalista, il cui motto è “doing more with less”, che occupa meno byte della vostra foto su Facebook e che i benchmark dichiarano il più veloce tra i linguaggi di scripting. Nato da menti brasiliane, l&amp;rsquo;hanno chiamato Lua, che vuol dire Luna in portoghese. Lua viene usato come linguaggio di scripting in Angry Birds, World of Warcraft e decine di altri videogame e software: nello scorso post abbiamo visto come creare un semplice plugin per VLC.</description></item><item><title>il linguaggio Lua: quinta parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-05/</link><pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-05/</guid><description>segue dalla quarta parte
“Sonata al chiaro di luna” : un plugin per vlc Come dicevamo all&amp;rsquo;inizio, Lua è usato da numerose applicazioni come linguaggio di estensione; per scopi didattici ho scelto di scrivere un semplice plugin per un programma diffuso, il media player universale VLC. Con questo plugin risolveremo per sempre l&amp;rsquo;annoso problema di decidere cosa sarebbe meglio sgranocchiare durante la visione! L&amp;rsquo;integrazione con lo scripting Lua è documentata in una serie di file README.</description></item><item><title>il linguaggio Lua: parte 4</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-04/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-04/</guid><description>segue dalla terza parte
“Moonlight Bay” (ovvero: “chiedi chi erano i vectors”) L&amp;rsquo;unica struttura dati disponibile in Lua è rappresentata dagli array o meglio, dalle tabelle (o hash): array associativi formati da coppie chiave-valore, nelle quali sia la chiave sia il valore possono essere qualsiasi tipo di dato. Vediamo un paio di esempi, dapprima un normale vettore:
&amp;gt; i = 3 &amp;gt; a = {1,3,5,7,9} &amp;gt; print(i,a[3],a[4],a[i+3]) questa sequenza stampa i valori 3,5,7,nil; la prima cosa che appare diversa rispetto ad un altro linguaggio è che gli indici per gli array partono da 1 anziché da zero; la seconda è che un eventuale sforamento dell&amp;rsquo;array non causa errore ma semplicemente ritorna nil.</description></item><item><title>il linguaggio Lua: parte 3</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-03/</link><pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-03/</guid><description>segue dalla seconda parte
Che fai tu luna in ciel ? : le funzioni Fino a che scriviamo script di poche righe, possiamo inserire le istruzioni nel programma principale, ma aumentando la complessità diventa necessario organizzare il codice in pezzi indipendenti e riutilizzabili; come in tutti gli altri linguaggi, in Lua è possibile definire funzioni; vediamo un esempio piuttosto classico:
function fattoriale(n) local f=1 -- variabile locale alla funzione for i=2,n do f=f*i end return f Abbiamo definito la funzione fattoriale, che da ora in avanti possiamo richiamare nel nostro codice:</description></item><item><title>il linguaggio Lua: parte 2</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-02/</link><pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-02/</guid><description>segue dalla prima parte
Moonwalking: Tipi di dato Nello scorsa puntata abbiamo utilizzato due degli otto tipi disponibili: i numeri e le stringhe. Per semplicita&amp;rsquo;, Lua non distingue tra interi e floating point: tutti i valori numerici sono conservati come double, cioe&amp;rsquo; in virgola mobile a doppia precisione. Nel caso la CPU non disponesse di unita&amp;rsquo; FPU, è possibile cambiare una riga nel sorgente (per l&amp;rsquo;esattezza, #define LUA_NUMBER in lua.h) e ricompilare; questo si fa tipicamente nei sistemi embedded con processori a basse prestazioni.</description></item><item><title>il linguaggio Lua: prima parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-01/</link><pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-01/</guid><description>introduzione Ho sempre avuto un debole per il software leggero e snello: sara&amp;rsquo; un retaggio di quando la memoria si misurava in Kb e lo storage era basato su&amp;hellip; audiocassette! Lua e&amp;rsquo; un linguaggio che incarna questa filosofia: occupa circa un centinaio di kbyte (meno di molte pagine web), ha una stupefacente rapidita&amp;rsquo; di esecuzione, una sintassi chiara e, come bonus, gira su qualsiasi CPU per cui sia disponibile un compilatore C.</description></item></channel></rss>