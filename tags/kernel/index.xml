<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kernel on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/kernel/</link><description>Recent content in kernel on ilManzo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2022 Andrea Manzini</copyright><lastBuildDate>Wed, 19 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>playing with eBPF interface - 2</title><link>https://ilmanzo.github.io/post/tracing-with-ebpf-02/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/tracing-with-ebpf-02/</guid><description>In the last post we introduced the BCC framework to interface Python code with eBPF facility. Now we are ready to make one step further!
#!/usr/bin/python3 import bcc bpf = bcc.BPF(text=&amp;#34;&amp;#34;&amp;#34; #include &amp;lt;uapi/linux/ptrace.h&amp;gt; int trace_malloc(struct pt_regs *ctx, size_t size) { bpf_trace_printk(&amp;#34;size=%d\\n&amp;#34;,size); return 0; };&amp;#34;&amp;#34;&amp;#34;) bpf.attach_uprobe(name=&amp;#34;c&amp;#34;,sym=&amp;#34;malloc&amp;#34;,fn_name=&amp;#34;trace_malloc&amp;#34;) while 1: (task, pid, cpu, flags, ts, msg) = bpf.trace_fields() print(f&amp;#34;task={task}\tmsg={msg}&amp;#34;) This code is a little more complex, but still quite easy: first of all we use bcc to attach an &amp;ldquo;user space probe&amp;rdquo; instead of a kernel probe, and the function being observed will be libc&amp;rsquo;s malloc.</description></item><item><title>playing with eBPF interface</title><link>https://ilmanzo.github.io/post/playing-with-ebpf-01/</link><pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/playing-with-ebpf-01/</guid><description>eBPF is a revolutionary technology that can run sandboxed programs in the Linux kernel without changing kernel source code or loading kernel modules. Basically any user can write code for a virtual machine that can interact with the kernel data structure and functions.
bcc is an high-level helper interface to eBPF (another is bpftrace). To use it, start by following installation guide , but if you have a recent Debian system, it&amp;rsquo;s just a matter of installing some packages:</description></item></channel></rss>