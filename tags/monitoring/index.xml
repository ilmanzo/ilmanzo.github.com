<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>monitoring on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/monitoring/</link><description>Recent content in monitoring on ilManzo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2012-2023 Andrea Manzini</copyright><lastBuildDate>Tue, 03 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/monitoring/index.xml" rel="self" type="application/rss+xml"/><item><title>linux resource control with cgroups</title><link>https://ilmanzo.github.io/post/linux-resource-control-with-cgroups/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/linux-resource-control-with-cgroups/</guid><description>intro Resource isolation is an hot topic these days, and it&amp;rsquo;s a problem excellently solved by containerization. However, we can achieve isolation between internal tasks of an operating system by leveraging a technology exposed by the kernel: cgroups. This component is also used by Docker, and other Linux container technologies.
Cgroups are the Linux way of organizing groups of processes: roughly speaking a cgroup is to a process what a process is to a thread: one can have many threads belonging to the same process, and in the same way one can join many processes inside the same cgroup.</description></item><item><title>monitor apache performance statistics</title><link>https://ilmanzo.github.io/post/logging-apache-performance-historical-statistics/</link><pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/logging-apache-performance-historical-statistics/</guid><description>the Apache module mod_status is very useful for inspecting your running webserver, but it gives you only realtime informations about workers, connections, and so on. I wanted a way to keep this data and then be able to do comparison, charts and more useful reports. The first step was configuring mod_status in order to be only accessible from localhost:
andrea@myserver:~$ cat /etc/apache2/mods-enabled/status.conf &amp;lt;IfModule mod_status.c&amp;gt; # # Allow server status reports generated by mod_status, # with the URL of http://servername/server-status # Uncomment and change the &amp;#34;192.</description></item><item><title>Linux: get simple I/O statistics per process</title><link>https://ilmanzo.github.io/post/simple-io-statistics-per-process/</link><pubDate>Fri, 22 Aug 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/simple-io-statistics-per-process/</guid><description>I had a trouble with a long process running and wish to know how much I/O this process is doing, so I wrote this quick and dirty python 2.x script:
import time,sys,datetime def read_stat(pid): f=open(&amp;#34;/proc/%s/io&amp;#34; % pid ,&amp;#34;r&amp;#34;) for line in f: if line.startswith(&amp;#39;rchar&amp;#39;): rchar=line.split(&amp;#39;:&amp;#39;)[1] continue if line.startswith(&amp;#39;wchar&amp;#39;): wchar=line.split(&amp;#39;:&amp;#39;)[1] continue f.close() return int(rchar),int(wchar) pid=sys.argv[1] r0,w0 = read_stat(pid) while 1: time.sleep(1) r1,w1 = read_stat(pid) print &amp;#34;%s\t\tr=%s\t\tw=%s&amp;#34; % (datetime.datetime.now().time(),r1-r0,w1-w0) r0,w0=r1,w1 You must give the process PID number as input to the script.</description></item></channel></rss>