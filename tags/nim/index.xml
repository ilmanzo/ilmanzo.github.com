<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nim on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/nim/</link><description>Recent content in nim on ilManzo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2022 Andrea Manzini</copyright><lastBuildDate>Sat, 05 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/nim/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing Python modules in Nim</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-nim/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-nim/</guid><description>Nim is a statically typed compiled systems programming language. It combines successful concepts from mature languages like Python, Ada and Modula. It&amp;rsquo;s Efficient, expressive, elegant and definitely worth to check.
While I was playing with it, I stumbled upon an interesting module that allows almost seamless interoperability betweeen Nim and Python; so I&amp;rsquo;m building a small proof of concept on this github project.
first of all the Nim code: # file: demo.</description></item></channel></rss>