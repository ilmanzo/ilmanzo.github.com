<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nim on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/nim/</link><description>Recent content in nim on ilManzo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2012-2023 Andrea Manzini</copyright><lastBuildDate>Tue, 14 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/nim/index.xml" rel="self" type="application/rss+xml"/><item><title>debugging a problematic build</title><link>https://ilmanzo.github.io/post/inspect-obs-vm-during-build/</link><pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/inspect-obs-vm-during-build/</guid><description>&lt;p>Today it&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/Pi_Day">PI Day&lt;/a>, and among other activities I decided to submit an openSUSE package update for the &lt;a href="https://nim-lang.org/">nim compiler&lt;/a>.
It went almost all well but unfortunately I faced a problem: on the i586 platform it fails to build.&lt;/p></description></item><item><title>a SUSE hackweek22 report</title><link>https://ilmanzo.github.io/post/suse-hackweek-2023-recap/</link><pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/suse-hackweek-2023-recap/</guid><description>&lt;p>On this February I decided to participate with a project to the &lt;a href="https://hackweek.opensuse.org/22/projects/containerfile-slash-dockerfile-generator-library">SUSE Hackweek&lt;/a>.&lt;/p></description></item><item><title>web components with Nim and Karax</title><link>https://ilmanzo.github.io/post/nim-frontend-web-development-with-karax/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/nim-frontend-web-development-with-karax/</guid><description>Inspired by a tweet from a fellow developer, I decided to take a look at Karax, a nifty framework for developing single page applications in Nim.
After following the basic tutorials and examples, I searched for something more complex and found very sparse documentation, so I&amp;rsquo;ll write my findings here.
As usual, the complete source code is on my github repo, where you can find also a working live demo.</description></item><item><title>Writing Python modules in Nim</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-nim/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-nim/</guid><description>Nim is a statically typed compiled systems programming language. It combines successful concepts from mature languages like Python, Ada and Modula. It&amp;rsquo;s Efficient, expressive, elegant and definitely worth to check.
While I was playing with it, I stumbled upon an interesting module that allows almost seamless interoperability betweeen Nim and Python; so I&amp;rsquo;m building a small proof of concept on this github project.
first of all the Nim code: # file: demo.</description></item></channel></rss>