<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/programming/</link><description>Recent content in programming on ilManzo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2022 Andrea Manzini</copyright><lastBuildDate>Mon, 09 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>compare package version across distros</title><link>https://ilmanzo.github.io/post/compare_package_versions_across_distros/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/compare_package_versions_across_distros/</guid><description>&lt;p>As a following on &lt;a href="https://ilmanzo.github.io/post/check-last-update-on-packages/">previous post&lt;/a>, I added an useful feature in order to have more information about a package.&lt;/p>
&lt;p>Since I maintain some openSUSE packages, I want to be informed if they gets outdated and if other packagers have released newer versions.
TLDR: This script now answers the question &amp;ldquo;Do some of my openSUSE packages have newer versions in other distros?&amp;rdquo;&lt;/p></description></item><item><title>get update info about packages</title><link>https://ilmanzo.github.io/post/check-last-update-on-packages/</link><pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/check-last-update-on-packages/</guid><description>&lt;p>being lazy, I made a small utility to check last pkgs update date on &lt;a href="https://build.opensuse.org/">Open Build Service&lt;/a>.&lt;/p>
&lt;p>You can find the project repository &lt;a href="https://github.com/ilmanzo/package_last_update">on my github&lt;/a>, but it&amp;rsquo;s so simple I can paste also here.&lt;/p>
&lt;p>The &lt;a href="https://github.com/ilmanzo/package_last_update/blob/master/README.md">usage&lt;/a> is pretty simple: just run the command giving it a package name, and then it will tell you when it was last updated. With this information, you can decide/check if the package needs some work on!&lt;/p></description></item><item><title>get notifications about openQA job status</title><link>https://ilmanzo.github.io/post/openqa-jobs-notifier/</link><pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/openqa-jobs-notifier/</guid><description>&lt;p>I got bored of &lt;em>&amp;lsquo;waiting&amp;rsquo;&lt;/em> for an &lt;a href="http://open.qa/">OpenQA&lt;/a> &lt;a href="https://openqa.opensuse.org/">openSUSE&lt;/a> job to complete, so I wrote this quick and dirty script&amp;hellip;&lt;/p>
&lt;p>For the same purpose there&amp;rsquo;s also the excellent and full-fledged &lt;a href="https://openqa-bites.github.io/posts/2021-02-25-openqa-mon/">openqa-mon&lt;/a>, but I took the chance to learn something by implementing a simpler version myself.&lt;/p></description></item><item><title>web components with Nim and Karax</title><link>https://ilmanzo.github.io/post/nim-frontend-web-development-with-karax/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/nim-frontend-web-development-with-karax/</guid><description>Inspired by a tweet from a fellow developer, I decided to take a look at Karax, a nifty framework for developing single page applications in Nim.
After following the basic tutorials and examples, I searched for something more complex and found very sparse documentation, so I&amp;rsquo;ll write my findings here.
As usual, the complete source code is on my github repo, where you can find also a working live demo.</description></item><item><title>integration between Python and Rust - Part 2</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-rust-2/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-rust-2/</guid><description>In this post we are going to write a new module for python: a very simple function exported from Rust that we can consume in the Python interpreter. We&amp;rsquo;ll leverage the PyO3 Rust bindings for the Python interpreter.
Let&amp;rsquo;s start with a new Cargo project:
$ cargo init --lib demo_rust_lib and insert the required settings in Cargo.toml:
[package] name = &amp;#34;rusty&amp;#34; version = &amp;#34;0.1.0&amp;#34; edition = &amp;#34;2021&amp;#34; [lib] name=&amp;#34;rusty&amp;#34; crate-type = [&amp;#34;cdylib&amp;#34;] [dependencies.</description></item><item><title>integration between Python and Rust - Part 1</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-rust-1/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-rust-1/</guid><description>Let&amp;rsquo;s get our feet wet; in this first part I&amp;rsquo;ll write about a very simple way to interface Rust and Python. First of all let&amp;rsquo;s build a Rust dynamic library with some basic functions.
// this file is: src/lib.rs #[no_mangle] pub extern &amp;#34;C&amp;#34; fn hello() { println!(&amp;#34;Hello from the library!&amp;#34;); } #[no_mangle] pub extern &amp;#34;C&amp;#34; fn sum(a: i32, b: i32) -&amp;gt; i32 { a + b } your Cargo.toml should look like this:</description></item><item><title>playing with eBPF interface - 2</title><link>https://ilmanzo.github.io/post/tracing-with-ebpf-02/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/tracing-with-ebpf-02/</guid><description>In the last post we introduced the BCC framework to interface Python code with eBPF facility. Now we are ready to make one step further!
#!/usr/bin/python3 import bcc bpf = bcc.BPF(text=&amp;#34;&amp;#34;&amp;#34; #include &amp;lt;uapi/linux/ptrace.h&amp;gt; int trace_malloc(struct pt_regs *ctx, size_t size) { bpf_trace_printk(&amp;#34;size=%d\\n&amp;#34;,size); return 0; };&amp;#34;&amp;#34;&amp;#34;) bpf.attach_uprobe(name=&amp;#34;c&amp;#34;,sym=&amp;#34;malloc&amp;#34;,fn_name=&amp;#34;trace_malloc&amp;#34;) while 1: (task, pid, cpu, flags, ts, msg) = bpf.trace_fields() print(f&amp;#34;task={task}\tmsg={msg}&amp;#34;) This code is a little more complex, but still quite easy: first of all we use bcc to attach an &amp;ldquo;user space probe&amp;rdquo; instead of a kernel probe, and the function being observed will be libc&amp;rsquo;s malloc.</description></item><item><title>playing with eBPF interface - 1</title><link>https://ilmanzo.github.io/post/playing-with-ebpf-01/</link><pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/playing-with-ebpf-01/</guid><description>eBPF is a revolutionary technology that can run sandboxed programs in the Linux kernel without changing kernel source code or loading kernel modules. Basically any user can write code for a virtual machine that can interact with the kernel data structure and functions.
bcc is an high-level helper interface to eBPF (another is bpftrace). To use it, start by following installation guide , but if you have a recent Debian system, it&amp;rsquo;s just a matter of installing some packages:</description></item><item><title>a 'pythonic' fileinput module for the D programming language</title><link>https://ilmanzo.github.io/post/fileinput-for-d-programming-language/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/fileinput-for-d-programming-language/</guid><description>When I write small command line utilities in Python, I often take advantage of the fileinput module that makes working with text files very convenient: the library permits to write quickly and easily a loop over standard input or a list of files, something like perl -a or awk line processing.
Then the size of input data grew, and also for a language comparison, I wanted to port my utility in the D programming language, but I cannot find an equivalent module, so I decided to write one myself.</description></item><item><title>Writing Python modules in Nim</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-nim/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-nim/</guid><description>Nim is a statically typed compiled systems programming language. It combines successful concepts from mature languages like Python, Ada and Modula. It&amp;rsquo;s Efficient, expressive, elegant and definitely worth to check.
While I was playing with it, I stumbled upon an interesting module that allows almost seamless interoperability betweeen Nim and Python; so I&amp;rsquo;m building a small proof of concept on this github project.
first of all the Nim code: # file: demo.</description></item><item><title>A new project to learn the Crystal Programming Language</title><link>https://ilmanzo.github.io/post/a-new-project-to-learn-the-crystal-programming-language/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-new-project-to-learn-the-crystal-programming-language/</guid><description>I&amp;rsquo;ve started a new side project named Crystal Koans, it&amp;rsquo;s a simple series of exercises organized as a big unit test suite.
The &amp;ldquo;koans&amp;rdquo; are heavily inspired by similar projects for other languages, but I didn&amp;rsquo;t found anything similar for Crystal. The project has been included in the awesome collection under the official Learning Resource for the language.
I&amp;rsquo;ll try to maintain and evolve it in the spare time, I hope you&amp;rsquo;ll find it useful, and any form of contribution is welcome.</description></item><item><title>Hijack C library functions in D</title><link>https://ilmanzo.github.io/post/hijack-c-library-function-in-d/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/hijack-c-library-function-in-d/</guid><description>I like playing with the D programming language and I wrote this little post to show how it&amp;rsquo;s easy to create a dynamic library (shared object, .so) that can be invoked in other programs; to have a little fun we will write a D replacement for the rand() C standard library function call. For your convenience, all the code is also on github
Let&amp;rsquo;s start with the demo implementation, a C program that calls 10 times the stdlib function rand() to get a random number.</description></item><item><title>a very simple NTP client in D</title><link>https://ilmanzo.github.io/post/a-simple-ntp-client-in-d/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-ntp-client-in-d/</guid><description>I am quite a fan of the D programming language and I think it deserves more attention, even if since a few months it&amp;rsquo;s becoming more and more popular, as it gained top20 in the TIOBE Index for February 2020.
As an experiment in network programming, I took this simple NTP client written in C and translated to D ; in my opinion while it&amp;rsquo;s keeping the low-level nature, it&amp;rsquo;s shorter, clearer and more effective.</description></item><item><title>migrating a repository from mercurial to git</title><link>https://ilmanzo.github.io/post/migrating-a-repository-from-mercurial-to-git/</link><pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/migrating-a-repository-from-mercurial-to-git/</guid><description>Since bitbucket is sunsetting the support for mercurial repositories, I wrote a quick and dirty script to automate the migration from mercurial to GIT:
#!/bin/bash set -e set -u if [ &amp;#34;$#&amp;#34; -ne 3 ]; then echo &amp;#34;Illegal number of parameters&amp;#34; echo &amp;#34;usage: migrate.sh reponame hgrepourl gitrepourl&amp;#34; exit 1 fi REPONAME=$1 HGURL=$2 GITURL=$3 echo &amp;#34;Migrating $REPONAME from $HGURL to $GITURL...&amp;#34; cd /tmp hg clone $HGURL cd $REPONAME hg bookmark -r default master hg bookmarks hg cd .</description></item><item><title>il linguaggio Lua: parte 14</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-14/</link><pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-14/</guid><description>segue dalla parte 13
Coroutine Come approccio alla programmazione concorrente, il linguaggio Lua non ha meccanismi interni per gestire nativamente i thread, ma si puÃ² appoggiare a ciÃ² che offre il sistema operativo sottostante. Lua invece internamente offre il supporto alle coroutine: un programma Lua puÃ² avere diversi percorsi di esecuzione &amp;lsquo;parallela&amp;rsquo; ognuno col proprio stack e variabili locali ma che condividono risorse e variabili globali con le altre coroutine.</description></item><item><title>il linguaggio Lua: parte 13</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-13/</link><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-13/</guid><description>segue dalla parte 12
Upvalue e Closure Per chi non ha familiaritÃ  con i concetti di programmazione funzionale questi termini possono sembrare un poâ oscuri; vediamo di chiarirli con un semplice esempio:
-- definisco una funzione che parte da un numero N e conta alla rovescia function CreaContatore(N) local v=N local function conta(x) if v&amp;gt;=x then v=v-x end return v end return conta end -- creo qualche istanza: contaDaDieci=CreaContatore(10) contaDaCento=CreaContatore(100) print(contaDaDieci(1)) 9 print(contaDaCento(1)) 99 print(contaDaCento(1)) 98 print(contaDaDieci(1)) 8 print(contaDaDieci(2)) 6 print(contaDaCento(10)) 88 osserviamo le variabili N,v che usate dalla funzione interna: non sono locali, ma nemmeno globali&amp;hellip; Sono upvalue, ovvero riferimenti che provengono da uno stackframe esterno.</description></item><item><title>il linguaggio Lua: parte 12</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-12/</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-12/</guid><description>segue dalla parte 11
segnalazioni lunari Tra le rocks piÃ¹ interessanti citiamo quelle che permettono le operazioni di networking, come luasocket; salendo di livello, spicca il Kepler project, che comprende un intero stack per applicazioni web: Lapis micro framework, il framework MVC Sailor, e TurboLua, un tool per costuire velocissimi microservizi REST .
Concludiamo la panoramica sulle librerie accennando ai moduli per creare interfacce grafiche; al pari degli altri linguaggi di scripting, Lua offre binding per i maggiori toolkit grafici: curses, GTK, QT, fltk, wx si usano come negli altri linguaggi e sarebbe qui tedioso illustrarne le modalitÃ .</description></item><item><title>il linguaggio Lua: parte 11</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-11/</link><pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-11/</guid><description>segue dalla parte 10
Rocce di Luna Poter organizzare il codice in piÃ¹ file Ã¨ molto utile per modularizzare i programmi, creando package che verranno caricati tramite l&amp;rsquo;istruzione require ânomefileâ. Vediamo un esempio:
-- geompkg.lua module(&amp;#34;geom&amp;#34;) local function quadrato(x) return x*x end local function rettangolo(b,h) return b*h end function area(param) if param.lato then return quadrato(param.lato) end local area=rettangolo(param.base,param.altezza) if param.triangolo or param.trapezio then return area/2 end return area end -- usepkg.</description></item><item><title>il linguaggio Lua: parte 10</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-10/</link><pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-10/</guid><description>segue dalla parte 9
stringhe e regular expression in questa puntata apriremo una piccola digressione per analizzare le funzionalitÃ  del modulo string, in particolare l&amp;rsquo;uso delle regular expression.
Il modulo string ci mette a disposizione potenti funzioni di ricerca e sostituzione basate su espressioni regolari. Una completa implementazione delle regexp POSIX occuperebbe piÃ¹ dell&amp;rsquo;intero linguaggio, ma tutto sommato le funzionalitÃ  principali sono state mantenute, e gli autori di Lua sono riusciti a impacchettare un âmotoreâ di pattern matching in meno di 500 righe di codice.</description></item><item><title>a honeypot ssh server in Go</title><link>https://ilmanzo.github.io/post/a-honeypot-ssh-server-in-go/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-honeypot-ssh-server-in-go/</guid><description>&lt;h2 id="honey-ssh-pot">honey-ssh-pot&lt;/h2>
&lt;p>Curious about who and how attempts ssh login to your home server ? Me too&amp;hellip; So I wrote a very simple ssh honeypot, just to collect interesting info about the kind guys who knocks my door :)&lt;/p>
&lt;p>warning: this is safe, but don&amp;rsquo;t run the service (well, ANY service) as root user. Even better if you can run it as a dedicate unprivileged user.&lt;/p>
&lt;p>This program is only for didactic use and not intended for deployment in a production network environment.&lt;/p>
&lt;p>If you want to have it exposed on the public internet, you must map port 22 of your wan router to the internal server port ( 2222 by default)&amp;hellip; Do it at your risk!&lt;/p></description></item><item><title>il linguaggio Lua: parte 9</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-09/</link><pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-09/</guid><description>segue dalla parte 8
il modulo lunare Per mantenere la sua natura minimalista, Lua ha ben poche funzionalitÃ  incluse nel linguaggio e delega molti aspetti a librerie e moduli esterni. Ad esempio le operazioni matematiche sono accessibili nel package, o se preferite, namespace col prefisso math:
$ lua &amp;gt;print(math.sin(math.pi/2)) 1 sarebbe oltremodo noioso elencare tutte le funzioni presenti, basti dire che oltre alle funzioni trigonometriche abbiamo logaritmi, esponenziali, modulo, minimo, massimo, arrotondamenti e generazione di valori random.</description></item><item><title>il linguaggio Lua: ottava parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-08/</link><pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-08/</guid><description>segue dalla settima parte
Oggetti volanti e non Lua non Ã¨ un linguaggio nativamente object-oriented. Se nei nostri script volessimo adottare uno stile OOP, ad esempio per modellare le operazioni su un conto corrente la cosa piÃ¹ naturale sarebbe usare una tabella:
Conto = { saldo = 200.0 } Questa sintassi potrebbe essere assimilata al &amp;lsquo;costruttore&amp;rsquo; dell&amp;rsquo;oggetto Conto. Possiamo anche definire dei metodi:
function Conto.preleva(cifra) Conto.saldo = Conto.saldo - cifra end e quindi potremmo comodamente chiamare, problemi economici a parte:</description></item><item><title>il linguaggio Lua: settima parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-07/</link><pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-07/</guid><description>segue dalla sesta parte
Iteratori e lua funzionale Cos&amp;rsquo;Ã¨ un iteratore? Informaticamente parlando, Ã¨ un costrutto che ci permette di scorrere strutture dati come liste, array, elenchi. In pratica, dato un elemento della struttura il compito dell&amp;rsquo;iteratore Ã¨ farci avere il prossimo su cui operare. Non ci stupirÃ  apprendere che in Lua gli iteratori sono funzioni. Vediamo un semplice esempio:
function reverse_iter(t) local i=#t+1 return function() i=i-1 if i&amp;gt;=0 then return t[i] end end end reverse_iter Ã¨ una fabbrica (factory) di funzioni: ogni volta che la chiamiamo, ci crea una nuova closure, ossia l&amp;rsquo;iteratore specifico per l&amp;rsquo;array che gli passiamo.</description></item><item><title>a simple PNG decoder in Go</title><link>https://ilmanzo.github.io/post/a-simple-png-decoder/</link><pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-png-decoder/</guid><description>while working with image files, I needed a simple way to analyze content of a picture; so I wrote this tool that &amp;ldquo;walks&amp;rdquo; inside a PNG file and reports all the chunks seen; this is intended to be expanded with more features in a future.
package main import ( &amp;#34;encoding/binary&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;os&amp;#34; ) type chunk struct { Length uint32 ChunkType [4]byte } func main() { if len(os.Args) != 2 { fmt.</description></item><item><title>il linguaggio Lua: sesta parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-06/</link><pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-06/</guid><description>segue dalla quinta parte
Quando il saggio indica la luna, lo sciocco guarda il dito Nello scorse puntate abbiamo appreso le basi di un linguaggio minimalista, il cui motto Ã¨ âdoing more with lessâ, che occupa meno byte della vostra foto su Facebook e che i benchmark dichiarano il piÃ¹ veloce tra i linguaggi di scripting. Nato da menti brasiliane, l&amp;rsquo;hanno chiamato Lua, che vuol dire Luna in portoghese. Lua viene usato come linguaggio di scripting in Angry Birds, World of Warcraft e decine di altri videogame e software: nello scorso post abbiamo visto come creare un semplice plugin per VLC.</description></item><item><title>il linguaggio Lua: quinta parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-05/</link><pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-05/</guid><description>segue dalla quarta parte
âSonata al chiaro di lunaâ : un plugin per vlc Come dicevamo all&amp;rsquo;inizio, Lua Ã¨ usato da numerose applicazioni come linguaggio di estensione; per scopi didattici ho scelto di scrivere un semplice plugin per un programma diffuso, il media player universale VLC. Con questo plugin risolveremo per sempre l&amp;rsquo;annoso problema di decidere cosa sarebbe meglio sgranocchiare durante la visione! L&amp;rsquo;integrazione con lo scripting Lua Ã¨ documentata in una serie di file README.</description></item><item><title>il linguaggio Lua: parte 4</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-04/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-04/</guid><description>segue dalla terza parte
âMoonlight Bayâ (ovvero: âchiedi chi erano i vectorsâ) L&amp;rsquo;unica struttura dati disponibile in Lua Ã¨ rappresentata dagli array o meglio, dalle tabelle (o hash): array associativi formati da coppie chiave-valore, nelle quali sia la chiave sia il valore possono essere qualsiasi tipo di dato. Vediamo un paio di esempi, dapprima un normale vettore:
&amp;gt; i = 3 &amp;gt; a = {1,3,5,7,9} &amp;gt; print(i,a[3],a[4],a[i+3]) questa sequenza stampa i valori 3,5,7,nil; la prima cosa che appare diversa rispetto ad un altro linguaggio Ã¨ che gli indici per gli array partono da 1 anzichÃ© da zero; la seconda Ã¨ che un eventuale sforamento dell&amp;rsquo;array non causa errore ma semplicemente ritorna nil.</description></item><item><title>il linguaggio Lua: parte 3</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-03/</link><pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-03/</guid><description>segue dalla seconda parte
Che fai tu luna in ciel ? : le funzioni Fino a che scriviamo script di poche righe, possiamo inserire le istruzioni nel programma principale, ma aumentando la complessitÃ  diventa necessario organizzare il codice in pezzi indipendenti e riutilizzabili; come in tutti gli altri linguaggi, in Lua Ã¨ possibile definire funzioni; vediamo un esempio piuttosto classico:
function fattoriale(n) local f=1 -- variabile locale alla funzione for i=2,n do f=f*i end return f Abbiamo definito la funzione fattoriale, che da ora in avanti possiamo richiamare nel nostro codice:</description></item><item><title>playing with Crystal Programming Language</title><link>https://ilmanzo.github.io/post/playing-with-crystal-programming-language/</link><pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/playing-with-crystal-programming-language/</guid><description>I&amp;rsquo;ve started experimenting with the Crystal Programming Language. It&amp;rsquo;s a nice and clean language with syntax similar to Ruby, but compiled to fast native code, and a lot of clever ideas, like union types and seamless C integration The project is still in early stages, but it&amp;rsquo;s promising.
Just to see how easy, I ported a small python library to Crystal, you can find it on https://github.com/ilmanzo/spark. I hope to find the time to improve on it!</description></item><item><title>a simple HTTP rewriting proxy</title><link>https://ilmanzo.github.io/post/a-simple-http-rewriting-proxy/</link><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-simple-http-rewriting-proxy/</guid><description>This is an example of using goproxy, a fast and robust multithread proxy engine to develop an HTTP proxy that rewrites content on the fly, with multiple search and substitutions. It can be useful for debugging and other less noble (but useful) purposes &amp;hellip;
// rewriting_proxy project main.go package main import ( &amp;#34;bytes&amp;#34; &amp;#34;flag&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.com/elazarl/goproxy&amp;#34; ) var replacements = []struct { from []byte to []byte }{ {[]byte(&amp;#34;#e8ecec&amp;#34;), []byte(&amp;#34;Red&amp;#34;)}, // ugly colors!</description></item><item><title>il linguaggio Lua: parte 2</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-02/</link><pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-02/</guid><description>segue dalla prima parte
Moonwalking: Tipi di dato Nello scorsa puntata abbiamo utilizzato due degli otto tipi disponibili: i numeri e le stringhe. Per semplicita&amp;rsquo;, Lua non distingue tra interi e floating point: tutti i valori numerici sono conservati come double, cioe&amp;rsquo; in virgola mobile a doppia precisione. Nel caso la CPU non disponesse di unita&amp;rsquo; FPU, Ã¨ possibile cambiare una riga nel sorgente (per l&amp;rsquo;esattezza, #define LUA_NUMBER in lua.h) e ricompilare; questo si fa tipicamente nei sistemi embedded con processori a basse prestazioni.</description></item><item><title>how to automatically expire mysql records after a fixed amount of time</title><link>https://ilmanzo.github.io/post/automatic-expiring-of-mysql-rows/</link><pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/automatic-expiring-of-mysql-rows/</guid><description>the issue we have a database table containing usernames and passwords, but we want to make them temporary like expiring after a fixed number of days from the creation. This is typical usage for a wi-fi captive portal with RADIUS authentication backed on mysql.
the idea we store a new field in the table with the timestamp, and run a periodic &amp;ldquo;cleaner&amp;rdquo; job that deletes record older than X days.</description></item><item><title>il linguaggio Lua: prima parte</title><link>https://ilmanzo.github.io/post/il-linguaggio-lua-01/</link><pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/il-linguaggio-lua-01/</guid><description>introduzione Ho sempre avuto un debole per il software leggero e snello: sara&amp;rsquo; un retaggio di quando la memoria si misurava in Kb e lo storage era basato su&amp;hellip; audiocassette! Lua e&amp;rsquo; un linguaggio che incarna questa filosofia: occupa circa un centinaio di kbyte (meno di molte pagine web), ha una stupefacente rapidita&amp;rsquo; di esecuzione, una sintassi chiara e, come bonus, gira su qualsiasi CPU per cui sia disponibile un compilatore C.</description></item><item><title>serata introduttiva al FabLab sulla programmazione Python</title><link>https://ilmanzo.github.io/post/serata-fablab/</link><pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/serata-fablab/</guid><description>Pubblico qui le slide che ho usato durante la serata dedicata alla programmazione Python, svoltasi presso il FabLab Verona
http://ilmanzo.github.io/files/slide_serata_python_fablab_2015.html</description></item><item><title>CGI with the Go Programming Language</title><link>https://ilmanzo.github.io/post/cgi-apps-in-go/</link><pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/cgi-apps-in-go/</guid><description>Following with the GO standard library exploration, I&amp;rsquo;ve written a toy example for using the CGI features. Native GoLang CGI web applications are very fast and can be useful for example in embedded systems, or in cheap web hosting where is not possible to run custom HTTP servers. The solution has some weak points, starting from lock management, but is only presented as a proof of concept and not for real use cases.</description></item><item><title>sample template usage in the Go Programming Language</title><link>https://ilmanzo.github.io/post/templating-in-go/</link><pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/templating-in-go/</guid><description>The GO programming language has a nice and useful standard library, which includes a powerful templating engine out of the box.
Here I wrote an example, generating HTML output from a simple data structure.
This program generates the following HTML output:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;my todo list&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;my TODO list&amp;lt;/h1&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; 1 Take out the dog &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; 2 Feed the cat &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; 3 Learn GO programming &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; Next step: use the template to provide interactive web pages &amp;hellip;</description></item><item><title>A new project to learn the D Programming Language</title><link>https://ilmanzo.github.io/post/a-new-project-to-learn-the-d-programming-language/</link><pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-new-project-to-learn-the-d-programming-language/</guid><description>I&amp;rsquo;ve started a new side project named D Lang Koans, it&amp;rsquo;s a simple series of exercises organized in a unit test suite.
The &amp;ldquo;koans&amp;rdquo; are heavily inspired by similar projects for other languages, but I didn&amp;rsquo;t found anything similar for D.
I&amp;rsquo;ll try to maintain and evolve it in the spare time, I hope you&amp;rsquo;ll find it useful.</description></item></channel></rss>