<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Python on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/python/</link><description>Recent content in Python on ilManzo's blog</description><generator>Hugo -- 0.152.1</generator><language>en-us</language><copyright>2012-2025 Andrea Manzini</copyright><lastBuildDate>Wed, 22 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Headless Testing of PySide/PyQt GUI Applications with pytest-qt</title><link>https://ilmanzo.github.io/post/testing_pyside_gui_applications/</link><pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/testing_pyside_gui_applications/</guid><description>An approach to headless testing of GUI programs</description></item><item><title>compare package version across distros</title><link>https://ilmanzo.github.io/post/compare_package_versions_across_distros/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/compare_package_versions_across_distros/</guid><description>a tool to check if an openSUSE package version is up to date against other distros</description></item><item><title>get update info about packages</title><link>https://ilmanzo.github.io/post/check-last-update-on-packages/</link><pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/check-last-update-on-packages/</guid><description>a simple wrapper to get last update date on a package</description></item><item><title>integration between Python and Rust - Part 2</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-rust-2/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-rust-2/</guid><description>some experiments with language FFI</description></item><item><title>integration between Python and Rust - Part 1</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-rust-1/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-rust-1/</guid><description>some experiments with language FFI</description></item><item><title>playing with eBPF interface - 2</title><link>https://ilmanzo.github.io/post/tracing-with-ebpf-02/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/tracing-with-ebpf-02/</guid><description>some fun experiments with tracing and snooping linux kernel</description></item><item><title>playing with eBPF interface - 1</title><link>https://ilmanzo.github.io/post/playing-with-ebpf-01/</link><pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/playing-with-ebpf-01/</guid><description>some fun experiments with tracing and snooping linux kernel</description></item><item><title>a 'pythonic' fileinput module for the D programming language</title><link>https://ilmanzo.github.io/post/fileinput-for-d-programming-language/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/fileinput-for-d-programming-language/</guid><description>an implementation of a custom iterator similar to Python&amp;#39;s fileinput</description></item><item><title>Writing Python modules in Nim</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-nim/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-nim/</guid><description>how to write a Python module using the Nim programming language</description></item><item><title>wrapping c plus plus classes in Python</title><link>https://ilmanzo.github.io/post/wrapping-c-plus-plus-classes-in-python/</link><pubDate>Mon, 08 Aug 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/wrapping-c-plus-plus-classes-in-python/</guid><description>&lt;p&gt;This is a quick and dirty way to interface C++ code with Python, translating one or more C++ classes in Python objects.&lt;/p&gt;
&lt;p&gt;First, we need some c++ sample code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//myclass.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;#ifndef MYCLASS_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#define MYCLASS_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; pets {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Dog&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Dog(string name, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; age);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;Dog();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string &lt;span style="color:#a6e22e"&gt;talk&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string m_name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m_age;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;//myclass.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34;myclass.h&amp;#34;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; pets {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Dog&lt;span style="color:#f92672"&gt;::&lt;/span&gt;Dog(std&lt;span style="color:#f92672"&gt;::&lt;/span&gt;string name, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; age)&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; m_name(name),m_age(age) { }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Dog&lt;span style="color:#f92672"&gt;::~&lt;/span&gt;Dog() { }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; std&lt;span style="color:#f92672"&gt;::&lt;/span&gt;string Dog&lt;span style="color:#f92672"&gt;::&lt;/span&gt;talk() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;BARK! I am a DOG and my name is &amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;+&lt;/span&gt;m_name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;now, we can try a little test program just to exercise our class:&lt;/p&gt;</description></item><item><title>serata introduttiva al FabLab sulla programmazione Python</title><link>https://ilmanzo.github.io/post/serata-fablab/</link><pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/serata-fablab/</guid><description>&lt;p&gt;Pubblico qui le slide che ho usato durante la serata dedicata alla programmazione Python, svoltasi presso il &lt;a href="http://www.veronafablab.it"&gt;FabLab Verona&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ilmanzo.github.io/files/slide_serata_python_fablab_2015.html"&gt;http://ilmanzo.github.io/files/slide_serata_python_fablab_2015.html&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Linux: get simple I/O statistics per process</title><link>https://ilmanzo.github.io/post/simple-io-statistics-per-process/</link><pubDate>Fri, 22 Aug 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/simple-io-statistics-per-process/</guid><description>&lt;p&gt;I had a trouble with a long process running and wish to know how much I/O
this process is doing, so I wrote this quick and dirty python 2.x script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; time&lt;span style="color:#f92672"&gt;,&lt;/span&gt;sys&lt;span style="color:#f92672"&gt;,&lt;/span&gt;datetime
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;read_stat&lt;/span&gt;(pid):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; f&lt;span style="color:#f92672"&gt;=&lt;/span&gt;open(&lt;span style="color:#e6db74"&gt;&amp;#34;/proc/&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/io&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; pid ,&lt;span style="color:#e6db74"&gt;&amp;#34;r&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; line &lt;span style="color:#f92672"&gt;in&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; line&lt;span style="color:#f92672"&gt;.&lt;/span&gt;startswith(&lt;span style="color:#e6db74"&gt;&amp;#39;rchar&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; rchar&lt;span style="color:#f92672"&gt;=&lt;/span&gt;line&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; line&lt;span style="color:#f92672"&gt;.&lt;/span&gt;startswith(&lt;span style="color:#e6db74"&gt;&amp;#39;wchar&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; wchar&lt;span style="color:#f92672"&gt;=&lt;/span&gt;line&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split(&lt;span style="color:#e6db74"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; f&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; int(rchar),int(wchar)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pid&lt;span style="color:#f92672"&gt;=&lt;/span&gt;sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;argv[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;r0,w0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; read_stat(pid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; time&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sleep(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r1,w1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; read_stat(pid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\t\t&lt;/span&gt;&lt;span style="color:#e6db74"&gt;r=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\t\t&lt;/span&gt;&lt;span style="color:#e6db74"&gt;w=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;now()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;time(),r1&lt;span style="color:#f92672"&gt;-&lt;/span&gt;r0,w1&lt;span style="color:#f92672"&gt;-&lt;/span&gt;w0)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r0,w0&lt;span style="color:#f92672"&gt;=&lt;/span&gt;r1,w1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You must give the process PID number as input to the script. In the output you
get the read/write throughput of the process in bytes per second, for instance:&lt;/p&gt;</description></item></channel></rss>