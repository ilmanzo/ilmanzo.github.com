<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ruby on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/ruby/</link><description>Recent content in Ruby on ilManzo's blog</description><generator>Hugo -- 0.125.5</generator><language>en-us</language><copyright>2012-2024 Andrea Manzini</copyright><lastBuildDate>Fri, 20 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>A new project to learn the Crystal Programming Language</title><link>https://ilmanzo.github.io/post/a-new-project-to-learn-the-crystal-programming-language/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/a-new-project-to-learn-the-crystal-programming-language/</guid><description>learn the crystal programming language by solving simple exercises</description></item><item><title>playing with Crystal Programming Language</title><link>https://ilmanzo.github.io/post/playing-with-crystal-programming-language/</link><pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/playing-with-crystal-programming-language/</guid><description>exploring new languages</description></item><item><title>semplice rate limit in Sinatra</title><link>https://ilmanzo.github.io/post/semplice-rate-limit-in-sinatra/</link><pubDate>Fri, 21 Dec 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/semplice-rate-limit-in-sinatra/</guid><description>Giocando con Sinatra ho avuto l&amp;rsquo;esigenza di servire una determinata pagina solo con un certa frequenza (tecnicamente un rate-limit); la cosa si puo&amp;rsquo; fare installando il middleware Rack:Throttle ma non volevo aggiungere un&amp;rsquo;altra gemma alle dipendenze&amp;hellip;
In questo esempio se al server arriva piu&amp;rsquo; di una richiesta in un intervallo di cinque secondi, rispondiamo a tono&amp;hellip;
SECONDS_BETWEEN_REQUEST=5 enable :sessions def ratelimit? now=Time.new.to_i session[&amp;#39;lastrequest&amp;#39;]||=0 #inizializza se non presente result=(now-session[&amp;#39;lastrequest&amp;#39;])&amp;lt;SECONDS_BETWEEN_REQUEST #passati dall&amp;#39;ultima richiesta ?</description></item><item><title>gestire i led delle schede PC Engines ALIX in Ruby</title><link>https://ilmanzo.github.io/post/gestire-i-led-delle-schede-pc-engines-alix/</link><pubDate>Fri, 09 Nov 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/gestire-i-led-delle-schede-pc-engines-alix/</guid><description>Natale si avvicina: mentre smanettavo su queste ottime PC Engines ALIX su cui ho installato una Debian modificata, ho scritto una comoda interfaccia per accendere/spegnere e far lampeggiare i led alla velocita&amp;rsquo; desiderata&amp;hellip;
class Led #numero da 1 a 3 def initialize(ledno) ledno++ # passo 0 ma comando 1 ledno=1 if ledno&amp;lt;1 ledno=3 if ledno&amp;gt;3 @ledsyspath=&amp;#34;/sys/devices/platform/leds_alix2/leds/alix:#{ledno}/&amp;#34; end def blink(millisec) File.open(@ledsyspath+&amp;#39;trigger&amp;#39;,&amp;#39;w&amp;#39;) { |f| f.write(&amp;#39;timer&amp;#39;) } File.open(@ledsyspath+&amp;#39;delay_off&amp;#39;,&amp;#39;w&amp;#39;) do |f| f.write(millisec.to_s) end File.open(@ledsyspath+&amp;#39;delay_on&amp;#39;,&amp;#39;w&amp;#39;) do |f| f.</description></item><item><title>background tasks in Ruby e linux</title><link>https://ilmanzo.github.io/post/background-tasks-in-ruby-e-linux/</link><pubDate>Mon, 05 Nov 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/background-tasks-in-ruby-e-linux/</guid><description>A volte negli script Ruby ho bisogno di controllare l&amp;rsquo;esecuzione di un comando eseguito in modalita&amp;rsquo; asincrona, ho creato pertanto una classe apposita:
class BackgroundJob def initialize(cmd) @pid = fork do # this code is run in the child process # you can do anything here, like changing current directory or reopening STDOUT exec cmd end end def stop! # kill it (other signals than TERM may be used, depending on the program you want # to kill.</description></item></channel></rss>