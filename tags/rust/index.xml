<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/rust/</link><description>Recent content in Rust on ilManzo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2022 Andrea Manzini</copyright><lastBuildDate>Fri, 07 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>integration between Python and Rust - Part 2</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-rust-2/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-rust-2/</guid><description>In this post we are going to write a new module for python: a very simple function exported from Rust that we can consume in the Python interpreter. We&amp;rsquo;ll leverage the PyO3 Rust bindings for the Python interpreter.
Let&amp;rsquo;s start with a new Cargo project:
$ cargo init --lib demo_rust_lib and insert the required settings in Cargo.toml:
[package] name = &amp;#34;rusty&amp;#34; version = &amp;#34;0.1.0&amp;#34; edition = &amp;#34;2021&amp;#34; [lib] name=&amp;#34;rusty&amp;#34; crate-type = [&amp;#34;cdylib&amp;#34;] [dependencies.</description></item><item><title>integration between Python and Rust - Part 1</title><link>https://ilmanzo.github.io/post/writing-python-modules-in-rust-1/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/writing-python-modules-in-rust-1/</guid><description>Let&amp;rsquo;s get our feet wet; in this first part I&amp;rsquo;ll write about a very simple way to interface Rust and Python. First of all let&amp;rsquo;s build a Rust dynamic library with some basic functions.
// this file is: src/lib.rs #[no_mangle] pub extern &amp;#34;C&amp;#34; fn hello() { println!(&amp;#34;Hello from the library!&amp;#34;); } #[no_mangle] pub extern &amp;#34;C&amp;#34; fn sum(a: i32, b: i32) -&amp;gt; i32 { a + b } your Cargo.</description></item></channel></rss>