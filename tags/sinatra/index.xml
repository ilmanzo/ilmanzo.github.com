<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Sinatra on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/sinatra/</link><description>Recent content in Sinatra on ilManzo's blog</description><generator>Hugo -- 0.133.0</generator><language>en-us</language><copyright>2012-2024 Andrea Manzini</copyright><lastBuildDate>Fri, 21 Dec 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/sinatra/index.xml" rel="self" type="application/rss+xml"/><item><title>semplice rate limit in Sinatra</title><link>https://ilmanzo.github.io/post/semplice-rate-limit-in-sinatra/</link><pubDate>Fri, 21 Dec 2012 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/semplice-rate-limit-in-sinatra/</guid><description>Giocando con Sinatra ho avuto l&amp;rsquo;esigenza di servire una determinata pagina solo con un certa frequenza (tecnicamente un rate-limit); la cosa si puo&amp;rsquo; fare installando il middleware Rack:Throttle ma non volevo aggiungere un&amp;rsquo;altra gemma alle dipendenze&amp;hellip;
In questo esempio se al server arriva piu&amp;rsquo; di una richiesta in un intervallo di cinque secondi, rispondiamo a tono&amp;hellip;
SECONDS_BETWEEN_REQUEST=5 enable :sessions def ratelimit? now=Time.new.to_i session[&amp;#39;lastrequest&amp;#39;]||=0 #inizializza se non presente result=(now-session[&amp;#39;lastrequest&amp;#39;])&amp;lt;SECONDS_BETWEEN_REQUEST #passati dall&amp;#39;ultima richiesta ?</description></item></channel></rss>