<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sysadmin on ilManzo's blog</title><link>https://ilmanzo.github.io/tags/sysadmin/</link><description>Recent content in sysadmin on ilManzo's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2012-2023 Andrea Manzini</copyright><lastBuildDate>Mon, 06 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://ilmanzo.github.io/tags/sysadmin/index.xml" rel="self" type="application/rss+xml"/><item><title>linux: how to access DHCP options from client</title><link>https://ilmanzo.github.io/post/access-dhcp-options-from-client/</link><pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/access-dhcp-options-from-client/</guid><description>As you may know, you can configure any DHCP server to send many options to the clients; for example to setup dns domains, http proxy (WPAD) and so on.
If you need to access these options from a linux client, you must configure the client to ASK the server for the new options, by editing /etc/dhcp/dhclient.conf, and add an entry like:
option WPAD code 252 = string; also request WPAD; done that, when you&amp;rsquo;ll ask for a dhcp, the dhclient process will invoke your hook scripts with two new environment variables, old_WPAD and new_WPAD, with the values before and after the renewal.</description></item><item><title>convert a binary file to ascii using hexdump</title><link>https://ilmanzo.github.io/post/hexdump-for-binary-file-manipulation/</link><pubDate>Thu, 20 Oct 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/hexdump-for-binary-file-manipulation/</guid><description>I have a binary file with data stored as two-byte big-endian 16-bit words. We need to extract the values in the file and print them in decimal ASCII format, so to obtain numbers in the 0-655535 range.
let&amp;rsquo;s create the sample file:
$ echo -en &amp;#34;\x01\x02\x03\x04\x05\x06\x07\x08&amp;#34; &amp;gt; file.bin and show its content in binary form:
$ hexdump -C file.bin 00000000 01 02 03 04 05 06 07 08 |........| 00000008 to get the desired output we can use the powerful, but little documented format string option of hexdump:</description></item><item><title>monit helper for quota monitoring in go</title><link>https://ilmanzo.github.io/post/golang-quota-monit-helper/</link><pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/golang-quota-monit-helper/</guid><description>I want to keep under control a system where each user has an amount of filesystem quota reserved; in particular I would like to get notified if and when a user exceeds some treshold. Since I already have Monit in place in the server, I took the chance to write a small Go utility in order to retrieve the quota percentage.
This is also an example on how to run external programs in Go and filter the output using regular expressions.</description></item><item><title>redirect output of an already running process</title><link>https://ilmanzo.github.io/post/redirect-output-of-running-process/</link><pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/redirect-output-of-running-process/</guid><description>Long story short: you have launched your script/program but forgot to redirect the output to a file for later inspection.
#!/usr/bin/python3 #sample endless running program that prints to stdout import time,datetime while True: print(datetime.datetime.now().time()) time.sleep(1) Using GNU Debugger you can re-attach to the process, then invoke the creation of a logfile and duplicate the file descriptor to make the system send the data to the new file, instead of the terminal:</description></item><item><title>Sincronizzare una directory tra due server linux</title><link>https://ilmanzo.github.io/post/simple-directory-sync/</link><pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/simple-directory-sync/</guid><description>Obiettivo vogliamo mantenere la stessa directory sincronizzata su due server linux.
Questo significa che ogni aggiunta/rimozione/modifica di file in questa directory verrà automaticamente riportato sull&amp;rsquo;altro (salvo conflitti). Diamo per assunto che i due server siano raggiungibili via rete, ma per qualsiasi motivo non sia possibile collegare dello spazio disco condiviso.
Implementazione Per raggiungere lo scopo, utilizzeremo il tool: csync2
su entrambi i server (che chiameremo nodo1 e nodo2), installiamo i pacchetti necessari:</description></item><item><title>Linux: get simple I/O statistics per process</title><link>https://ilmanzo.github.io/post/simple-io-statistics-per-process/</link><pubDate>Fri, 22 Aug 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/simple-io-statistics-per-process/</guid><description>I had a trouble with a long process running and wish to know how much I/O this process is doing, so I wrote this quick and dirty python 2.x script:
import time,sys,datetime def read_stat(pid): f=open(&amp;#34;/proc/%s/io&amp;#34; % pid ,&amp;#34;r&amp;#34;) for line in f: if line.startswith(&amp;#39;rchar&amp;#39;): rchar=line.split(&amp;#39;:&amp;#39;)[1] continue if line.startswith(&amp;#39;wchar&amp;#39;): wchar=line.split(&amp;#39;:&amp;#39;)[1] continue f.close() return int(rchar),int(wchar) pid=sys.argv[1] r0,w0 = read_stat(pid) while 1: time.sleep(1) r1,w1 = read_stat(pid) print &amp;#34;%s\t\tr=%s\t\tw=%s&amp;#34; % (datetime.datetime.now().time(),r1-r0,w1-w0) r0,w0=r1,w1 You must give the process PID number as input to the script.</description></item><item><title>Compress and encrypt your backups</title><link>https://ilmanzo.github.io/post/compress-and-encrypt-your-remote-backups/</link><pubDate>Wed, 11 Jun 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/compress-and-encrypt-your-remote-backups/</guid><description>It&amp;rsquo;s always recommended to backup your data for safety, but for safety AND security let&amp;rsquo;s encrypt your backups!
to compress and encrypt with &amp;lsquo;mypassword&amp;rsquo;: tar -Jcf - directory | openssl aes-256-cbc -salt -k mypassword -out backup.tar.xz.aes
to decrypt and decompress: openssl aes-256-cbc -d -salt -k mypassword -in backup.tar.xz.aes | tar -xJ -f - Another trick with the tar command is useful for remote backups: tar -zcvfp - /wwwdata | ssh root@remote.</description></item><item><title>dovecot: cleaning old Spam and Trash messages after some days</title><link>https://ilmanzo.github.io/post/postfix-dovecot-cleanup-virtual-folders/</link><pubDate>Wed, 05 Mar 2014 00:00:00 +0000</pubDate><guid>https://ilmanzo.github.io/post/postfix-dovecot-cleanup-virtual-folders/</guid><description>This script is useful to delete old messages in &amp;ldquo;Junk&amp;rdquo; mail folders (Spam, Trash) automatically after some days.
adapted from these notes to work on debian/postfixadmin/dovecot
#!/bin/bash # # itera sulle mailbox cancellando messaggi vecchi # per default, nel cestino 30gg e Spam 15 gg # # MySQL details HOST=&amp;#34;127.0.0.1&amp;#34;; USER=&amp;#34;put_here_your_mysql_user&amp;#34;; PWD=&amp;#34;put_here_your_mysql_password&amp;#34;; MYSQL=&amp;#34;/usr/bin/mysql&amp;#34;; # dovecot details DOVEADM=&amp;#34;/usr/bin/doveadm&amp;#34;; TEMPFILE=$(/bin/mktemp) # Output sql to a file that we want to run echo &amp;#34;use postfixadmin; select username from mailbox&amp;#34; &amp;gt; $TEMPFILE # Run the query and get the results (adjust the path to mysql) results=$($MYSQL -h $HOST -u $USER -p$PWD -N &amp;lt; $TEMPFILE); # Loop through each row for row in $results do echo &amp;#34;Purging $row Trash and Junk mailbox.</description></item></channel></rss>